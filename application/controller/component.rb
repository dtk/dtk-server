module XYZ
  class ComponentController < Controller
    helper :i18n_string_mapping

    def dock_edit(component_id)
      component = create_object_from_id(component_id)
      attr_list = component.get_attributes_unraveled()

      #TODO The ordering should not matter all that much since the views will be generated by the view defs
      ordered_attr_list = attr_list.sort{|a,b|(a[:i18n]||"_") <=> (b[:i18n]||"_")}

      tpl = R8Tpl::TemplateR8.new("dock/component_edit",user_context())
      tpl.assign("field_list",ordered_attr_list)
      tpl.assign("component_id",component_id)
      return {:content => tpl.render()}
    end

    def edit(component_id)
#pp [:view_def,ViewDefProcessor.get(id_handle(component_id))]
      component = create_object_from_id(component_id)
      attr_list = component.get_attributes_unraveled()
      #TODO The ordering should not matter all that much since the views will be generated by the view defs
      ordered_attr_list = attr_list.sort{|a,b|(a[:name]||"_") <=> (b[:name]||"_")}

      action_name = "test_component_edit"
      tpl = R8Tpl::TemplateR8.new("#{model_name()}/#{action_name}",user_context())
      tpl.assign("attribute_list",ordered_attr_list)
      tpl.assign("component_id",component_id)
      return {:content => tpl.render()}
    end

#TODO: rename to save
    def save_attributes(explicit_hash=nil)
=begin
Would expect to have something like:

component = Compoennt.new(component_id)
component.save(request.params)
=end

      attr_val_hash = explicit_hash || request.params.dup
      #TODO: can thsi be handled another way
      #convert empty strings to nils
      attr_val_hash.each{|k,v|attr_val_hash[k] = nil if v.kind_of?(String) and v.empty?}
pp [:in_save_attrs,attr_val_hash]
      component_id = attr_val_hash.delete("component_id").to_i
      attribute_rows = AttributeComplexType.ravel_raw_post_hash(attr_val_hash,:attribute,component_id)
      
pp [:after_ravel,attribute_rows]

      attr_mh = ModelHandle.new(ret_session_context_id(),:attribute)
      Attribute.update_and_propagate_attributes(attr_mh,attribute_rows)
      redirect "/xyz/component/edit/#{component_id.to_s}"
    end


    def testjsonlayout
      tpl = R8Tpl::TemplateR8.new('component/testjson',user_context())
      tpl.assign(:testing, 'Testing')

      _model_var = {}
      _model_var[:i18n] = get_model_i18n(model_name().to_s,user_context())
      tpl.assign("_#{model_name().to_s}",_model_var)

      return {:content => tpl.render()}
    end


    def testjshello
      tpl = R8Tpl::TemplateR8.new('component/testjshello',user_context())
      tpl.set_js_tpl_name('testjshello')
      tpl.assign(:testing, 'Testing JSON Call Hello')

      _model_var = {}
      _model_var[:i18n] = get_model_i18n(model_name().to_s,user_context())
      tpl.assign("_#{model_name().to_s}",_model_var)

      return tpl.render()
    end

    def testjsgoodbye
      tpl = R8Tpl::TemplateR8.new('component/testjsgoodbye',user_context())
      tpl.set_js_tpl_name('testjsgoodbye')
      tpl.assign(:testing, 'Testing JSON Call Goodbye')

      _model_var = {}
      _model_var[:i18n] = get_model_i18n(model_name().to_s,user_context())
      tpl.assign("_#{model_name().to_s}",_model_var)

      return tpl.render()
    end

  end

  def add_assembly_items(id=nil)
      parent_id = request.params["parent_id"]
      assembly_left_pos = request.params["assembly_left_pos"]
=begin
      filter = [:and,[:eq,:assembly_id,id]]
      field_set = Model::FieldSet.new(:node)
      ds = SearchObject.create_from_field_set(field_set,ret_session_context_id(),filter).create_dataset()
      node_list = ds.all
=end
      node_list = get_objects(:node,{:assembly_id=>id})

      #get the top most item in the list to set new positions
      top_node = {}
      top_most = 2000
      node_list.each do |node|
        unless (node[:ui]||{})[parent_id.to_sym]
          Log.error("no coordinates for node with id #{node[:id].to_s} in #{parent_id.to_s}")
          return {}
        end
        if node[:ui][parent_id.to_sym][:top].to_i < top_most.to_i
          left_diff = assembly_left_pos.to_i-node[:ui][parent_id.to_sym][:left].to_i
          top_node = {:id=>node[:id],:ui=>node[:ui][parent_id.to_sym],:left_diff=>left_diff}
          top_most = node[:ui][parent_id.to_sym][:top]
        end
      end

      tpl = R8Tpl::TemplateR8.new("node/wspace_display",user_context())
      tpl.set_js_tpl_name("node_wspace_display")
      tpl_info = tpl.render()
      include_js_tpl(tpl_info[:src])

      items = Array.new
      item_id_list = []
      node_list.each do |node|
        item_id_list << node[:id]
        if node[:id] == top_node[:id]
          node[:ui][parent_id.to_sym][:left] = assembly_left_pos
        else
          node[:ui][parent_id.to_sym][:left] = node[:ui][parent_id.to_sym][:left].to_i+top_node[:left_diff].to_i
        end

        item = {
          :type => 'node',
          :object => node,
#          :toolbar_def => toolbar_def,
          :tpl_callback => tpl_info[:template_callback],
          :ui => node[:ui][parent_id.to_sym]
        }

        items << item
      end

pp '+++++++++++++++++++++++++++++++'
pp '++++CHECKING TO SEE IF ASSEMBLY REDIRECT IS CORRECT+++'
pp '+++++++++++++++++++++++++++++++'
pp request.params
pp '+++++++++++++++++++++++++++++++'
pp items
#    p_str = JSON.generate(request.params)
#    run_javascript("alert('Added assembly, here are req params:  #{p_str}');")

    addItemsObj = JSON.generate(items)
    run_javascript("R8.Workspace.addItems(#{addItemsObj});")

    item_id_list_json = JSON.generate(item_id_list)
    run_javascript("R8.Workspace.touchItems(#{item_id_list_json});")

    return {}
  end

end

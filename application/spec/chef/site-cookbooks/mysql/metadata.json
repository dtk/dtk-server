{
    "recipes": {
      "mysql::slave": "For extending mysql server to serve as a slave",
      "mysql::db": "Mysql DB",
      "mysql::server2": "Installs packages required for mysql servers w/o manual intervention",
      "mysql::client_app1": "Sample client application that connects to a mysql database",
      "mysql::client": "Installs packages required for mysql clients using run_action magic",
      "mysql::master": "For extending mysql server to serve as a master",
      "mysql::server_ec2": "Performs EC2-specific mountpoint manipulation",
      "mysql::server": "Installs packages required for mysql servers w/o manual intervention"
    },
    "conflicting": {
    },
    "description": "Installs and configures mysql for client or server",
    "long_description": "= DESCRIPTION:\n\nInstalls and configures MySQL client or server.\n\n= REQUIREMENTS:\n\n== Platform:\n\nBest tested on Ubuntu 9.04,9.10. On EC2, requires platform that supports -o bind option for the 'mount' command.\n\n== Cookbooks:\n\nRequires Opscode's openssl cookbook for secure password generation.\n\nRequires a C compiler and Ruby development package in order to build mysql gem with native extensions. On Debian and Ubuntu systems this is satisfied by installing the \"build-essential\" and \"ruby-dev\" packages before running Chef. See USAGE below for information on how to handle this during a Chef run.\n\n= ATTRIBUTES: \n\n* mysql[:server_root_password] - Set the server's root password with this, default is a randomly generated password with OpenSSL::Random.random_bytes.\n* mysql[:server_repl_password] - Set the replication user 'repl' password with this, default is a randomly generated password with OpenSSL::Random.random_bytes.\n* mysql[:server_debian_password] - Set the debian-sys-maint user password with this, default is a randomly generated password with OpenSSL::Random.random_bytes.\n* mysql[:bind_address] - Listen address for MySQLd, default is node's ipaddress.\n* mysql[:datadir] - Location for mysql data directory, default is \"/var/lib/mysql\" \n* mysql[:ec2_path] - location of mysql datadir on EC2 nodes, default \"/mnt/mysql\" \n\nPerformance tuning attributes, each corresponds to the same-named parameter in my.cnf; default values listed\n\n* mysql[:tunable][:key_buffer]          = \"250M\"\n* mysql[:tunable][:max_connections]     = \"800\" \n* mysql[:tunable][:wait_timeout]        = \"180\" \n* mysql[:tunable][:net_write_timeout]   = \"30\" \n* mysql[:tunable][:net_write_timeout]   = \"30\" \n* mysql[:tunable][:back_log]            = \"128\" \n* mysql[:tunable][:table_cache]         = \"128\" \n* mysql[:tunable][:max_heap_table_size] = \"32M\" \n\n= USAGE:\n\nOn client nodes,\n\n  include_recipe \"mysql::client\"\n  \nAs the common use case is on systems with Ruby, we also install the MySQL RubyGem. Because we may want to be able to use the gem within another Chef recipe, we make sure the mysql development package and gem are installed first. The key is this:\n\n  r = package ... do\n    action :nothing\n  end\n  \n  r.run_action(:install)\n  \nThis creates a resource object for the package and does the installation before other recipes are parsed. You'll need to have the C compiler and such (ie, build-essential on Ubuntu) before running the recipes, but we already do that when installing Chef :-). If you want to be able to access a MySQL database via Ruby within another recipe, you could do so, like so:\n\n  Gem.clear_paths # needed for Chef to find the gem...\n  require 'mysql' # requires the mysql gem\n\n  execute \"create #{node[:railsapp][:db][:database]} database\" do\n    command \"/usr/bin/mysqladmin -u root -p#{node[:mysql][:server_root_password]} create #{node[:railsapp][:db][:database]}\"\n    not_if do\n      m = Mysql.new(\"localhost\", \"root\", @node[:mysql][:server_root_password])\n      m.list_dbs.include?(@node[:railsapp][:db][:database])\n    end\n  end\n\nOn server nodes, \n\n  include_recipe \"mysql::server\"\n  \nOn Debian/Ubuntu this will preseed the MySQL package with the randomly generated root password. You can of course change the password afterward, but this makes sure that there's a good password set. You can view it in the node data in the Chef Server webui. Sets a new password for debian-sys-maint user as well.\n\nAlso sets up 'repl' user grants for replication slaves.\n\nOn EC2 nodes,\n\n  include_recipe \"mysql::server_ec2\"\n  \nWhen the ec2_path doesn't exist we look for a mounted filesystem (eg, EBS) and move the datadir there.\n\nThe client recipe is already included by server and 'default' recipes.\n\nTo make sure that a C compiler and the Ruby development libraries are installed, use the following run list in the node or in a role:\n\n{\n  \"run_list\": [\n    \"recipe[build-essential]\",\n    \"recipe[ruby]\",\n    \"recipe[mysql::server]\"\n  ]\n}\n\nThe build-essential and ruby cookbooks install the packages in question during the \"execution\" phase of the Chef client run, rather than the compile phase when the MySQL gem is installed. To work around this for now until the build-essential and ruby packages are updated, modify your local copies of the recipes:\n\nIn the Opscode build-essential default recipe:\n\n %w{build-essential binutils-doc}.each do |pkg|\n   p = package pkg do\n     action :nothing\n   end\n   p.run_action(:install)\n end\n\nAnd the ruby recipe to have the following:\n\nextra_packages.each do |pkg|\n p = package pkg do\n   action :nothing\n end\n p.run_action(:install)\nend\n\nThese cookbooks aren't strict dependencies, and not if the installation process already included installing build-essential and ruby1.8-dev (e.g. RubyGems installation).\n\nFor more infromation on the compile vs execution phase of a Chef run:\n\nhttp://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run\n\n= LICENSE and AUTHOR:\n      \nAuthor:: Joshua Timberman (<joshua@opscode.com>)\nAuthor:: AJ Christensen (<aj@opscode.com>)\n\nCopyright:: 2009, Opscode, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n__[{:service_name=>\"mysql_server\", :conditions=>[{:description=>\"this service should be accessible over tcp\", :name=>\"accessible_over_tcp\", :to_monitor=>[{:params=>[\"sap\"], :name=>\"inet_service_up\"}]}, {:description=>\"the user 'monitor_user_id' should be able to log into this service\", :to_monitor=>[{:params=>[\"db_info\", \"monitor_user_id\"], :applicability_conditions=>[\"lambda{|p|p[:db_info] and p[:db_info].find{|x|x[:username] == p[:monitor_user_id]}}\"], :name=>\"mysql_basic_health\"}]}], :recipe_names=>[\"mysql::server\", \"mysql::server2\"]}]__",
    "providing": {
    },
    "attributes": {
      "mysql/_service/mysql_server/monitor_user_id": {
        "required": "optional",
        "is_service_attribute": true,
        "calculated": false,
        "transform": "root",
        "monitoring_input": "true",
        "choice": [

        ],
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "description": "db userid for monitoring application to use"
      },
      "mysql/db_component": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "mysql__db",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ]
      },
      "mysql/server_root_password": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Server Root Password",
        "description": "Randomly generated password for the mysqld root user"
      },
      "mysql/_service/mysql_server/sap_config__l4": {
        "required": "optional",
        "is_service_attribute": true,
        "calculated": false,
        "transform": [
          {
            "port": {
              "__ref": "node[mysql][port]"
            },
            "protocol": "tcp"
          }
        ],
        "choice": [

        ],
        "type": "hash",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "description": "mysql ip service access point configuration",
        "semantic_type": {
          ":array": "sap_config__l4"
        }
      },
      "mysql/tunable/max_heap_table_size": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "32M",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Tunable Max Heap Table Size"
      },
      "_meta_info": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "type": "string",
        "recipes": [

        ],
        "basic_types": {
          "mysql::slave": {
            "feature": {
              "base_recipes": [
                "mysql::server",
                "mysql::server2"
              ]
            }
          },
          "mysql::server2": "service",
          "mysql::client": "package",
          "mysql::master": {
            "feature": {
              "base_recipes": [
                "mysql::server",
                "mysql::server2"
              ]
            }
          },
          "mysql::server": "service"
        }
      },
      "mysql/datadir": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "/var/lib/mysql",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Data Directory",
        "description": "Location of mysql databases"
      },
      "mysql/bind_address": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Bind Address",
        "description": "Address that mysqld should listen on"
      },
      "mysql/tunable/back_log": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "128",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Tunable Back Log"
      },
      "mysql/tunable/wait_timeout": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "180",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Tunable Wait Timeout"
      },
      "mysql/port": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "3306",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL TCP Port",
        "description": "MySQL Server TCP port"
      },
      "mysql/_service/mysql_server/sap_ref_to_master": {
        "required": "required",
        "is_service_attribute": true,
        "calculated": false,
        "choice": [

        ],
        "type": "hash",
        "recipes": [
          "mysql::slave"
        ],
        "description": "mysql service access point reference for slave to connect with master",
        "semantic_type": {
          "sap_ref__db": {
            "application": {
              "type": "sql::mysql"
            }
          }
        }
      },
      "mysql/_service/mysql_server/sap_config_for_slave": {
        "required": "optional",
        "is_service_attribute": true,
        "calculated": false,
        "transform": [
          {
            "constraints": {
            },
            "port": {
              "__ref": "node[mysql][port]"
            },
            "protocol": "tcp",
            "application": {
              "username": "slave",
              "database": "mysql",
              "password": {
                "__ref": "node[mysql][server_root_password]"
              }
            }
          }
        ],
        "choice": [

        ],
        "type": "hash",
        "recipes": [
          "mysql::master"
        ],
        "description": "mysql ip service access point configuration for slave",
        "semantic_type": {
          ":array": "sap_config__l4"
        }
      },
      "mysql/_service/mysql_server/db_params": {
        "required": "optional",
        "is_service_attribute": true,
        "calculated": false,
        "choice": [

        ],
        "type": "hash",
        "recipes": [
          "mysql::db"
        ],
        "description": "Parameters for a db",
        "semantic_type": "db_params"
      },
      "mysql/tunable/net_read_timeout": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "30",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Tunable Net Read Timeout"
      },
      "mysql/tunable/max_connections": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "800",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Tunable Max Connections"
      },
      "mysql/tunable/table_cache": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "128",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Tunable Table Cache"
      },
      "mysql/tunable": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "type": "hash",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Tunables",
        "description": "Hash of MySQL tunable attributes"
      },
      "mysql/_service/mysql_server/sap__socket": {
        "required": "optional",
        "is_service_attribute": true,
        "calculated": false,
        "transform": {
          "socket_file": "/var/run/mysqld/mysqld.sock"
        },
        "choice": [

        ],
        "type": "hash",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "description": "mysql unix socket service access point",
        "semantic_type": "sap__socket"
      },
      "mysql/ec2_path": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "/mnt/mysql",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL EC2 Path",
        "description": "Location of mysql directory on EC2 instance EBS volumes"
      },
      "mysql/_service/mysql_server/master_log": {
        "required": "required",
        "is_service_attribute": true,
        "calculated": false,
        "choice": [

        ],
        "type": "hash",
        "recipes": [
          "mysql::master"
        ],
        "description": "master log position",
        "semantic_type": "mysql_master_log_info"
      },
      "mysql/_service/mysql_server/master_log_ref": {
        "required": "required",
        "is_service_attribute": true,
        "calculated": false,
        "choice": [

        ],
        "type": "hash",
        "recipes": [
          "mysql::slave"
        ],
        "description": "reference for mysql slave to get master log position",
        "semantic_type": "mysql_master_log_info"
      },
      "mysql/tunable/net_write_timeout": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "30",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Tunable Net Write Timeout"
      },
      "mysql/tunable/key_buffer": {
        "required": "optional",
        "calculated": false,
        "choice": [

        ],
        "default": "250M",
        "type": "string",
        "recipes": [
          "mysql::server",
          "mysql::server2"
        ],
        "display_name": "MySQL Tuntable Key Buffer"
      }
    },
    "maintainer": "Your Name",
    "replacing": {
    },
    "dependencies": {
      "openssl": [

      ]
    },
    "maintainer_email": "youremail@example.com",
    "groupings": {
    },
    "platforms": {
      "debian": [

      ],
      "ubuntu": [

      ]
    },
    "version": "0.24.0",
    "recommendations": {
    },
    "license": "Apache v2.0",
    "name": "mysql",
    "suggestions": {
    }
  }
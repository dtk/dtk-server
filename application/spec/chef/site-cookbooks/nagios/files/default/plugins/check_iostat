#!/usr/bin/env ruby
#adapted from scout plugins
require 'optparse'

options = {:device => nil}

optparser = OptionParser.new do |opt|
  opt.banner = "Usage: #{$0} [options]"
  opt.on('-D', '--device DEVICE', "The device to check, eg 'sda1'. If not specified, uses the device mounted at '/'") {|o| options[:device] = o if o }
end

args = []
begin
  args = optparser.parse!
rescue => e
  $stderr.print e
  $stderr.print optparser
  exit 0
end
class Iostat 
  def initialize(options={})
    @options = options
  end	     
  def run()
    stats = iostat(device)
    unless stats 
      print "CRITICAL - Device #{device} not found.\n"
      exit 2
    end
    print info(stats)
    exit 0			
  end	 
  
  COLUMNS = %w(major minor name rio rmerge rsect ruse wio wmerge wsect wuse running use aveq)

  def iostat(dev)
    IO.foreach('/proc/diskstats') do |line|
      entry = Hash[*COLUMNS.zip(line.strip.split(/\s+/).collect { |v| Integer(v) rescue v }).flatten]

      return entry if dev.include?(entry['name'])
    end

    nil
  end

  def device()
    @options[:device] || `mount`.split("\n").grep(/ \/ /)[0].split[0]
  end

  StatusKey = "name"
  def info(values)
    ret = "OK"
    return (ret << "\n") unless values[StatusKey] #TBD: ignoring case where have perf data, but no status 
    ret << " - #{StatusKey}: #{values[StatusKey]}"
    values.each.reject{|k,v|k == StatusKey}.each{|k,v| ret << " | #{k}: #{v}"}
    ret << "\n"
  end

end

Iostat.new(options).run
=begin
scout yml file
may use print names from here 

metadata:
  rps:
    label: Reads/sec
    precision: 0
  wps:
    label: Writes/sec
    precision: 0
  rkbps:
    label: Read kBps
    precision: 1
    units: kB/s
  wkbps:
    label: Write kBps
    precision: 1
    units: kB/s
  await:
    label: I/O Wait
    precision: 1
    units: ms
  util:
    label: Utilization
    precision: 0
    units: %
  aveq:
    label: Average Queue Size
    precision: 1

triggers:
  - type: peak
    dname: util
    max_value: 80%
=end

#!/usr/bin/env ruby
#adapted from scout plugins
require 'optparse'

options = {}

optparser = OptionParser.new do |opt|
  opt.banner = "Usage: #{$0}"
end

args = []
begin
  args = optparser.parse!
rescue => e
  $stderr.print e
  $stderr.print optparser
  exit 0
end

class MemoryProfiler 
  def initialize(options={})
    @options = options
  end
  def run()
    stats = get_stats()
    print info(stats)
    exit 0
  end

  def get_stats()
    mem_info = {}
    `cat /proc/meminfo`.each_line do |line|
      _, key, value = *line.match(/^(\w+):\s+(\d+)\s/)
      mem_info[key] = value.to_i
    end
    
    # memory info is empty - operating system may not support it (why doesn't an exception get raised earlier on mac osx?)
    if mem_info.empty?
      print "CRITICAL - No such file or directory (/proc/meminfo)"
    end
    
    mem_total = mem_info['MemTotal'] / 1024
    mem_free = (mem_info['MemFree'] + mem_info['Buffers'] + mem_info['Cached']) / 1024
    mem_used = mem_total - mem_free
    mem_percent_used = (mem_used / mem_total.to_f * 100).to_i

    swap_total = mem_info['SwapTotal'] / 1024
    swap_free = mem_info['SwapFree'] / 1024
    swap_used = swap_total - swap_free
    unless swap_total == 0    
      swap_percent_used = (swap_used / swap_total.to_f * 100).to_i
    end
    
    # will be passed at the end to report to Scout
    report_data = Hash.new

    report_data['Memory Total'] = mem_total
    report_data['Memory Used'] = mem_used
    report_data['% Memory Used'] = mem_percent_used

    report_data['Swap Total'] = swap_total
    report_data['Swap Used'] = swap_used
    unless  swap_total == 0   
      report_data['% Swap Used'] = swap_percent_used
    end
    report_data
        
  rescue Exception => e
    if e.message =~ /No such file or directory/
      print "CRITICAL - Unable to find /proc/meminfo. Please ensure your operationg system supports procfs: http://en.wikipedia.org/wiki/Procfs\n"
      
    else
      print "CRITICAL\n"
    end
    exit 2
  end

  StatusKey = "Memory Total"
  def info(values)
    ret = "OK"
    return (ret << "\n") unless values[StatusKey] #TBD: ignoring case where have perf data, but no status 
    ret << " - #{StatusKey}: #{values[StatusKey]}"
    values.each.reject{|k,v|k == StatusKey}.each{|k,v| ret << " | #{k}: #{v}"}
    ret << "\n"
  end
end

MemoryProfiler.new(options).run
=begin
scout yml file
may use print names from here 
metadata:
  Memory Total:
    units: MB
    precision: 0
    larger_is_better: true
  Memory Used:
    units: MB
    precision: 0
  % Memory Used:
    units: %
    precision: 0
  Swap Total:
    units: MB
    precision: 0
  Swap Used:
    units: MB
    precision: 0
  % Swap Used:
    units: %
    precision: 0

triggers:
  - type: peak
    dname: % Swap Used
    max_value: 50
=end

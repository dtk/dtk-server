#!/usr/bin/env ruby
#from http://github.com/shift/nagios-check-redis.git
require 'optparse'
require 'rubygems'
require 'redis'

options = {:host => 'localhost',
          :port => 6379,
          :db => 0,
          :password => nil,
          :timeout => 3}

optparser = OptionParser.new do |opt|
  opt.banner = "Usage: #{$0} -H <hostname> [options]"
  opt.on('-H', '--host HOSTNAME', 'Hostname') {|o| options[:host] = o if o }
  opt.on('-p', '--port PORT', 'Port (Default: "6379")') {|o| options[:port] = o if o }
  opt.on('-P', '--password PASSWORD', 'Password (Default: blank)') {|o| options[:password] = o if o }
  opt.on('-T', '--timeout SECONDS', 'Timeout in seconds (Default: 3)') {|o| options[:timeout] = o if o }
end

args = []
begin
  args = optparser.parse!
rescue => e
  $stderr.print e
  $stderr.print optparser
  exit 0
end

class CheckRedis
    StatusKey = "redis_version"
    PerfKeys = %w(last_save_time total_connections_received connected_clients total_commands_processed connected_slaves uptime_in_seconds used_memory_human uptime_in_days changes_since_last_save)
  def initialize(opts)
    @opts = opts
  end

  def output_info
    r = nil
    begin 
      r = Redis.new(@opts)
     rescue Errno::ECONNREFUSED
      print "CRITICAL - Connection refused.\n"
      exit 2
     rescue Errno::ENETUNREACH
      print "CRITICAL - Network is unreachable.\n"
      exit 2
     rescue Errno::EHOSTUNREACH
      print "CRITICAL - No route to host.\n"
      exit 2
    end
    unless r and r.info
      print "CRITICAL - Cannot retrieve redis results"
      exit 2
    end

    values = Hash.new
    pruning_keys = [StatusKey] + PerfKeys
    r.info.each {|k,v| values[k.to_s] = v if pruning_keys.include?(k.to_s)}
    print info(values)
    exit 0
  end

  private

  def info(values)
    ret = "OK"
    return (ret << "\n") unless values[StatusKey] #TBD: ignoring case where have perf data, but no status 
    ret << " - #{StatusKey}: #{values[StatusKey]}"
    values.each{|k,v| ret << " | #{k}: #{v}"}
    ret << "\n"
  end
end

CheckRedis.new(options).output_info


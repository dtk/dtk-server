{
  "datacenter": {
    "dc1": {
      "display_name": "Production East",
      "description": "Production East"
    },
    "dc2": {
      "display_name": "Staging 1",
      "description": "Staging 1"
    }
  },
  "library": {
    "test": {
      "data_source": {
        "chef": {
          "last_collection_timestamp": "Sat Mar 19 06:22:50 +0000 2011",
          "display_name": "chef",
          "data_source_entry": {
            "component_recipe": {
              "ds_is_golden_store": true,
              "display_name": "component_recipe",
              "data_source_entry": {
                "component_monitoring_item": {
                  "ds_is_golden_store": true,
                  "display_name": "component_monitoring_item",
                  "ds_name": "chef",
                  "obj_type": "monitoring_item"
                },
                "component_attribute": {
                  "ds_is_golden_store": true,
                  "display_name": "component_attribute",
                  "data_source_entry": {
                    "attribute_dependency": {
                      "ds_is_golden_store": true,
                      "display_name": "attribute_dependency",
                      "ds_name": "chef",
                      "obj_type": "dependency"
                    }
                  },
                  "ds_name": "chef",
                  "obj_type": "attribute"
                }
              },
              "ds_name": "chef",
              "source_obj_type": "recipe",
              "obj_type": "component"
            }
          },
          "ds_name": "chef"
        },
        "ec2": {
          "last_collection_timestamp": "Sat Mar 19 06:23:00 +0000 2011",
          "display_name": "ec2",
          "data_source_entry": {
            "node_image": {
              "ds_is_golden_store": true,
              "display_name": "node_image",
              "ds_name": "ec2",
              "source_obj_type": "image",
              "obj_type": "node"
            }
          },
          "ds_name": "ec2"
        },
        "user_data": {
          "last_collection_timestamp": "Sat Mar 19 06:23:03 +0000 2011",
          "display_name": "user_data",
          "data_source_entry": {
            "component": {
              "ds_is_golden_store": true,
              "display_name": "component",
              "data_source_entry": {
                "component_dependency": {
                  "ds_is_golden_store": true,
                  "display_name": "dependency",
                  "ds_name": "user_data",
                  "obj_type": "dependency"
                },
                "component_attribute": {
                  "ds_is_golden_store": true,
                  "display_name": "attribute",
                  "data_source_entry": {
                    "attribute_dependency": {
                      "ds_is_golden_store": true,
                      "display_name": "dependency",
                      "ds_name": "user_data",
                      "obj_type": "dependency"
                    }
                  },
                  "ds_name": "user_data",
                  "obj_type": "attribute"
                }
              },
              "ds_name": "user_data",
              "obj_type": "component"
            },
            "node": {
              "ds_is_golden_store": true,
              "display_name": "node",
              "ds_name": "user_data",
              "obj_type": "node"
            }
          },
          "ds_name": "user_data"
        }
      },
      "display_name": "test",
      "node": {
        "ami-ee38c987": {
          "monitoring_item": {
            "check_ping": {
              "display_name": "check_ping",
              "description": "ping",
              "enabled": true
            },
            "check_mem": {
              "display_name": "check_mem",
              "description": "Free Memory",
              "enabled": true
            },
            "check_local_procs": {
              "display_name": "check_local_procs",
              "description": "Processes",
              "enabled": true
            },
            "check_all_disks": {
              "display_name": "check_all_disks",
              "description": "Free Space All Disks",
              "enabled": true
            },
            "check_memory_profiler": {
              "display_name": "check_memory_profiler",
              "description": "Memory Profiler",
              "enabled": true
            },
            "check_iostat": {
              "display_name": "check_iostat",
              "description": "Iostat",
              "enabled": true
            },
            "check_ssh": {
              "display_name": "check_ssh",
              "description": "SSH",
              "enabled": true
            }
          },
          "type": "image",
          "ds_source_obj_type": "image",
          "ui": {
            "images": {
              "display": "ubuntu.png",
              "tnail": "ubuntu.png",
              "tiny": ""
            }
          },
          "display_name": "ami-ee38c987",
          "data_source": "user_data",
          "external_ref": {
            "type": "ec2_image",
            "image_id": "ami-ee38c987"
          },
          "ds_attributes": {
            "type": "machine",
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "block_device_mapping": [
              {
                "snapshotId": "snap-f9179794",
                "deviceName": "/dev/sda1",
                "deleteOnTermination": "true",
                "volumeSize": 8
              }
            ],
            "description": null,
            "is_public": false,
            "state": "available",
            "kernel_id": "aki-3af50453",
            "virtualizationType": "paravirtual",
            "owner_id": "411986592491",
            "tags": {
            },
            "location": "411986592491/rnp-chef-09-12-mcollective-1-0-ubuntu-lucid-x86_32",
            "name": "rnp-chef-09-12-mcollective-1-0-ubuntu-lucid-x86_32",
            "flavor": {
              "disk": null
            },
            "id": "ami-ee38c987",
            "product_codes": [

            ],
            "architecture": "i386"
          },
          "attribute": {
            "host_addresses_ipv4": {
              "required": false,
              "is_port": true,
              "semantic_type": {
                ":array": "host_address_ipv4"
              },
              "display_name": "host_addresses_ipv4",
              "value_asserted": [
                null
              ],
              "semantic_type_summary": "host_address_ipv4",
              "read_only": true,
              "data_type": "json",
              "dynamic": true,
              "hidden": false,
              "cannot_change": false
            }
          },
          "is_deployed": true,
          "node_interface": {
            "eth0": {
              "type": "ethernet",
              "display_name": "eth0"
            }
          },
          "ds_key": "[:user_data, \"/library/test/ami-ee38c987\"]"
        }
      },
      "component": {
        "hadoop__pig": {
          "type": "instance",
          "component_type": "hadoop__pig",
          "ui": {
            "images": {
              "display": "hadoop-pig.png",
              "tnail": "hadoop-pig.png",
              "tiny": ""
            }
          },
          "display_name": "hadoop__pig",
          "description": "Installs hadoop's pig package",
          "external_ref": {
            "recipe_name": "hadoop::pig",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"hadoop-pig.png\",\"display\":\"hadoop-pig.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/hadoop__pig",
            "ref": "hadoop__pig",
            "basic_type": "service"
          },
          "only_one_per_node": true,
          "ds_key": "[:user_data, \"/library/test/hadoop__pig\"]",
          "basic_type": "service"
        },
        "mysql__db": {
          "type": "instance",
          "component_type": "mysql__db",
          "ui": {
            "images": {
              "display": "mysql.png",
              "tnail": "mysql.png",
              "tiny": ""
            }
          },
          "display_name": "mysql__db",
          "description": "Mysql DB",
          "external_ref": {
            "recipe_name": "mysql::db",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"mysql.png\",\"display\":\"mysql.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/mysql__db",
            "only_one_per_node": false,
            "ref": "mysql__db",
            "specific_type": "mysql_db_server"
          },
          "only_one_per_node": false,
          "attribute": {
            "db_params": {
              "required": false,
              "is_port": true,
              "semantic_type": "db_params",
              "display_name": "db_params",
              "description": "Parameters for a db",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[mysql_server][db_params]"
              },
              "semantic_type_summary": "db_params",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/mysql__db\"]",
          "basic_type": "service",
          "specific_type": "mysql_db_server"
        },
        "hadoop_cloudera_c3": {
          "type": "instance",
          "component_type": "hadoop_cloudera_c3",
          "ui": {
            "images": {
              "display": "cloudera.png",
              "tnail": "cloudera.png",
              "tiny": ""
            }
          },
          "display_name": "hadoop_cloudera_c3",
          "description": "Installs hadoop from Cloudera's repo",
          "external_ref": {
            "recipe_name": "hadoop_cloudera_c3",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"cloudera.png\",\"display\":\"cloudera.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/hadoop_cloudera_c3",
            "ref": "hadoop_cloudera_c3",
            "basic_type": "service"
          },
          "only_one_per_node": true,
          "attribute": {
            "jmxremote_password": {
              "required": false,
              "is_port": true,
              "display_name": "jmxremote_password",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[hadoop_namenode][jmxremote_password]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "jmxremote_port": {
              "required": false,
              "is_port": true,
              "display_name": "jmxremote_port",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[hadoop_namenode][jmxremote_port]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/hadoop_cloudera_c3\"]",
          "basic_type": "service"
        },
        "postgresql__db": {
          "type": "instance",
          "component_type": "postgresql__db",
          "ui": {
            "images": {
              "display": "database-unknown.png",
              "tnail": "database-unknown.png",
              "tiny": ""
            }
          },
          "display_name": "postgresql__db",
          "description": "Postgresql DB",
          "external_ref": {
            "recipe_name": "postgresql::db",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"database-unknown.png\",\"display\":\"database-unknown.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/postgresql__db",
            "only_one_per_node": false,
            "ref": "postgresql__db",
            "specific_type": "postgres_db"
          },
          "only_one_per_node": false,
          "attribute": {
            "db_params": {
              "required": false,
              "is_port": true,
              "semantic_type": "db_params",
              "display_name": "db_params",
              "description": "Parameters for a db",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[postgresql][db_params]"
              },
              "semantic_type_summary": "db_params",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/postgresql__db\"]",
          "basic_type": "database",
          "specific_type": "postgres_db"
        },
        "java_webapp": {
          "component_type": "java_webapp",
          "ui": {
            "images": {
              "display": "java-01.png",
              "tnail": "java-01.png",
              "tiny": ""
            }
          },
          "display_name": "java_webapp",
          "dependency": {
            "tomcat": {
              "type": "component",
              "display_name": "tomcat",
              "description": "tomcat is required for java_webapp",
              "severity": "warning",
              "search_pattern": {
                ":filter": [
                  ":eq",
                  ":component_type",
                  "tomcat"
                ]
              }
            }
          },
          "ds_attributes": {
            "component_type": "java_webapp",
            "ui": "{\"images\": {\"tnail\":\"java-01.png\",\"display\":\"java-01.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/java_webapp",
            "dependency": {
              "tomcat": {
                "required_component": "tomcat"
              }
            },
            "only_one_per_node": false,
            "attribute": {
              "db_config": {
                "required": true,
                "is_port": true,
                "semantic_type": "db_config",
                "description": "DB configuration",
                "display_name": "db_config",
                "semantic_type_summary": "db_config",
                "data_type": "json"
              },
              "sap_ref__l4": {
                "required": true,
                "is_port": true,
                "semantic_type": "sap_ref__l4",
                "description": "postgresql admin service access point reference to connect to server",
                "display_name": "sap_ref__l4",
                "semantic_type_summary": "sap_ref__l4",
                "dependency": {
                  "attribute_constraint": {
                    "type": "attribute",
                    "description": "Not connecting to Mysql Server",
                    "display_name": "attribute_constraint",
                    "search_pattern": {
                      ":filter": [
                        ":eq",
                        ":specific_type",
                        "mysql_db_server"
                      ]
                    }
                  }
                },
                "read_only": false,
                "data_type": "json",
                "hidden": false,
                "dynamic": false,
                "cannot_change": false
              }
            },
            "ref": "java_webapp",
            "specific_type": "java_app"
          },
          "only_one_per_node": false,
          "attribute": {
            "sap_ref__l4": {
              "required": true,
              "is_port": true,
              "semantic_type": "sap_ref__l4",
              "display_name": "sap_ref__l4",
              "external_ref": {
                "type": "attribute",
                "path": "sap_ref__l4"
              },
              "semantic_type_summary": "sap_ref__l4",
              "dependency": {
                "attribute_constraint": {
                  "type": "attribute",
                  "display_name": "attribute_constraint",
                  "description": "Not connecting to Mysql Server",
                  "severity": "error",
                  "search_pattern": {
                    ":filter": [
                      ":eq",
                      ":specific_type",
                      "mysql_db_server"
                    ]
                  }
                }
              },
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "db_config": {
              "required": true,
              "is_port": true,
              "semantic_type": "db_config",
              "display_name": "db_config",
              "external_ref": {
                "type": "attribute",
                "path": "db_config"
              },
              "semantic_type_summary": "db_config",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/java_webapp\"]",
          "basic_type": "application",
          "specific_type": "java_app"
        },
        "php__php5": {
          "type": "instance",
          "component_type": "php__php5",
          "ui": {
            "images": {
              "display": "php.png",
              "tnail": "php.png",
              "tiny": ""
            }
          },
          "display_name": "php__php5",
          "description": "Install php5 packages and php.ini config file",
          "external_ref": {
            "recipe_name": "php::php5",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"php.png\",\"display\":\"php.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/php__php5",
            "ref": "php__php5",
            "specific_type": "php"
          },
          "only_one_per_node": true,
          "ds_key": "[:user_data, \"/library/test/php__php5\"]",
          "basic_type": "language",
          "specific_type": "php"
        },
        "wordpress": {
          "type": "instance",
          "component_type": "wordpress",
          "ui": {
            "images": {
              "display": "wordpress.png",
              "tnail": "wordpress.png",
              "tiny": ""
            }
          },
          "display_name": "wordpress",
          "description": "Installs and configures wordpress LAMP stack on a single system",
          "external_ref": {
            "recipe_name": "wordpress",
            "type": "chef_recipe"
          },
          "dependency": {
            "php__php5": {
              "type": "component",
              "display_name": "php__php5",
              "description": "Php5 is required for Wordpress",
              "severity": "warning",
              "search_pattern": {
                ":filter": [
                  ":eq",
                  ":component_type",
                  "php__php5"
                ]
              }
            },
            "apache2": {
              "type": "component",
              "display_name": "apache2",
              "description": "Apache2 is required for Wordpress",
              "severity": "warning",
              "search_pattern": {
                ":filter": [
                  ":eq",
                  ":component_type",
                  "apache2"
                ]
              }
            }
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"wordpress.png\",\"display\":\"wordpress.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/wordpress",
            "dependency": {
              "php__php5": {
                "required_component": "php__php5"
              },
              "apache2": {
                "required_component": "apache2"
              }
            },
            "ref": "wordpress",
            "specific_type": "php_app"
          },
          "only_one_per_node": true,
          "attribute": {
            "db__user": {
              "required": false,
              "is_port": false,
              "display_name": "db__user",
              "description": "Wordpress will connect to MySQL using this user.",
              "value_asserted": "wordpressuser",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][db][user]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "sap_ref__l4": {
              "required": true,
              "is_port": true,
              "semantic_type": {
                "sap_ref__l4": {
                  "application": {
                    "type": "sql"
                  }
                }
              },
              "display_name": "sap_ref__l4",
              "description": "wordpress service access point reference",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[wordpress][sap_ref__l4]"
              },
              "semantic_type_summary": "sap_ref__l4",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "dir": {
              "required": false,
              "is_port": false,
              "display_name": "dir",
              "description": "Location to place wordpress files.",
              "value_asserted": "/var/www",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][dir]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "db__database": {
              "required": false,
              "is_port": false,
              "display_name": "db__database",
              "description": "Wordpress will use this MySQL database to store its data.",
              "value_asserted": "wordpressdb",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][db][database]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "keys__logged_in": {
              "required": false,
              "is_port": false,
              "display_name": "keys__logged_in",
              "description": "Wordpress logged-in key.",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][keys][logged_in]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "keys__nonce": {
              "required": false,
              "is_port": false,
              "display_name": "keys__nonce",
              "description": "Wordpress nonce key.",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][keys][nonce]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "checksum": {
              "required": false,
              "is_port": false,
              "display_name": "checksum",
              "description": "Checksum of the tarball for the version specified.",
              "value_asserted": "7342627f4a3dca44886c5aca6834cc88671dbd3aa2760182d2fcb9a330807",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][checksum]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "db__password": {
              "required": false,
              "is_port": false,
              "display_name": "db__password",
              "description": "Password for the Wordpress MySQL user.",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][db][password]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "version": {
              "required": false,
              "is_port": false,
              "display_name": "version",
              "description": "Version of Wordpress to download from the Wordpress site.",
              "value_asserted": "2.9.2",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][version]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "keys__secure_auth": {
              "required": false,
              "is_port": false,
              "display_name": "keys__secure_auth",
              "description": "Wordpress secure auth key.",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][keys][secure_auth]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "keys__auth": {
              "required": false,
              "is_port": false,
              "display_name": "keys__auth",
              "description": "Wordpress auth key.",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][keys][auth]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/wordpress\"]",
          "basic_type": "application",
          "specific_type": "php_app"
        },
        "mysql__slave": {
          "type": "instance",
          "component_type": "mysql__slave",
          "ui": {
            "images": {
              "display": "mysql.png",
              "tnail": "mysql.png",
              "tiny": ""
            }
          },
          "display_name": "mysql__slave",
          "description": "For extending mysql server to serve as a slave",
          "external_ref": {
            "recipe_name": "mysql::slave",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"mysql.png\",\"display\":\"mysql.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/mysql__slave",
            "ref": "mysql__slave",
            "basic_type": "extension"
          },
          "only_one_per_node": true,
          "attribute": {
            "sap_ref_to_master": {
              "required": true,
              "is_port": true,
              "semantic_type": {
                "sap_ref__db": {
                  "application": {
                    "type": "sql::mysql"
                  }
                }
              },
              "display_name": "sap_ref_to_master",
              "description": "mysql service access point reference for slave to connect with master",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[mysql_server][sap_ref_to_master]"
              },
              "semantic_type_summary": "sap_ref__db",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "master_log_ref": {
              "required": true,
              "is_port": true,
              "semantic_type": "mysql_master_log_info",
              "display_name": "master_log_ref",
              "description": "reference for mysql slave to get master log position",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[mysql_server][master_log_ref]"
              },
              "semantic_type_summary": "mysql_master_log_info",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/mysql__slave\"]",
          "basic_type": "extension"
        },
        "postgresql__app": {
          "type": "instance",
          "component_type": "postgresql__app",
          "ui": {
            "images": {
              "display": "postgres.png",
              "tnail": "postgres.png",
              "tiny": ""
            }
          },
          "display_name": "postgresql__app",
          "description": "Test app",
          "external_ref": {
            "recipe_name": "postgresql::app",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"postgres.png\",\"display\":\"postgres.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/postgresql__app",
            "attribute": {
              "db_config": {
                "required": true,
                "is_port": true,
                "semantic_type": "db_config",
                "description": "DB configuration",
                "display_name": "db_config",
                "semantic_type_summary": "db_config",
                "data_type": "json"
              },
              "sap_ref__l4": {
                "required": true,
                "is_port": true,
                "semantic_type": "sap_ref__l4",
                "description": "Layer 4 DB ref",
                "display_name": "sap_ref__l4",
                "semantic_type_summary": "sap_ref__l4",
                "dependency": {
                  "attribute_constraint": {
                    "type": "attribute",
                    "description": "Not connecting to Postgres Server",
                    "display_name": "attribute_constraint",
                    "search_pattern": {
                      ":filter": [
                        ":eq",
                        ":specific_type",
                        "postgres_db_server"
                      ]
                    }
                  }
                },
                "data_type": "json"
              }
            },
            "ref": "postgresql__app",
            "basic_type": "application"
          },
          "only_one_per_node": true,
          "attribute": {
            "sap_ref__l4": {
              "required": true,
              "is_port": true,
              "semantic_type": "sap_ref__l4",
              "display_name": "sap_ref__l4",
              "external_ref": {
                "type": "attribute",
                "path": "sap_ref__l4"
              },
              "semantic_type_summary": "sap_ref__l4",
              "dependency": {
                "attribute_constraint": {
                  "type": "attribute",
                  "display_name": "attribute_constraint",
                  "description": "Not connecting to Postgres Server",
                  "severity": "error",
                  "search_pattern": {
                    ":filter": [
                      ":eq",
                      ":specific_type",
                      "postgres_db_server"
                    ]
                  }
                }
              },
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "db_config": {
              "required": true,
              "is_port": true,
              "semantic_type": "db_config",
              "display_name": "db_config",
              "external_ref": {
                "type": "attribute",
                "path": "db_config"
              },
              "semantic_type_summary": "db_config",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/postgresql__app\"]",
          "basic_type": "application"
        },
        "hadoop__hive": {
          "type": "instance",
          "component_type": "hadoop__hive",
          "ui": {
            "images": {
              "display": "hadoop-hive.png",
              "tnail": "hadoop-hive.png",
              "tiny": ""
            }
          },
          "display_name": "hadoop__hive",
          "description": "Installs hadoop's hive package",
          "external_ref": {
            "recipe_name": "hadoop::hive",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"hadoop-hive.png\",\"display\":\"hadoop-hive.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/hadoop__hive",
            "ref": "hadoop__hive",
            "basic_type": "service"
          },
          "only_one_per_node": true,
          "ds_key": "[:user_data, \"/library/test/hadoop__hive\"]",
          "basic_type": "service"
        },
        "postgresql__server": {
          "type": "instance",
          "component_type": "postgresql__server",
          "ui": {
            "images": {
              "display": "postgres.png",
              "tnail": "postgres.png",
              "tiny": ""
            }
          },
          "display_name": "postgresql__server",
          "description": "Installs postgresql server packages, debian family style",
          "external_ref": {
            "recipe_name": "postgresql::server",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"postgres.png\",\"display\":\"postgres.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/postgresql__server",
            "ref": "postgresql__server",
            "specific_type": "postgres_db_server"
          },
          "only_one_per_node": true,
          "attribute": {
            "shared_buffers": {
              "required": false,
              "is_port": false,
              "display_name": "shared_buffers",
              "value_asserted": "28MB",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[postgresql][shared_buffers]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "max_connections": {
              "required": false,
              "is_port": false,
              "display_name": "max_connections",
              "value_asserted": "100",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[postgresql][max_connections]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "effective_cache_size": {
              "required": false,
              "is_port": false,
              "display_name": "effective_cache_size",
              "value_asserted": "128MB",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[postgresql][effective_cache_size]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "db_component": {
              "required": false,
              "is_port": false,
              "display_name": "db_component",
              "value_asserted": "postgresql__db",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[postgresql][db_component]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "sap_config__l4": {
              "required": false,
              "is_port": true,
              "semantic_type": {
                ":array": "sap_config__l4"
              },
              "display_name": "sap_config__l4",
              "description": "postgres ip service access point configuration",
              "value_asserted": [
                {
                  "port": 5432,
                  "protocol": "tcp"
                }
              ],
              "external_ref": {
                "type": "service_attribute",
                "path": "service[postgresql][sap_config__l4]"
              },
              "semantic_type_summary": "sap_config__l4",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/postgresql__server\"]",
          "basic_type": "service",
          "specific_type": "postgres_db_server"
        },
        "java": {
          "type": "instance",
          "component_type": "java",
          "ui": {
            "images": {
              "display": "java-01.png",
              "tnail": "java-01.png",
              "tiny": ""
            }
          },
          "display_name": "java",
          "description": "Installs openjdk to provide Java",
          "external_ref": {
            "recipe_name": "java",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"java-01.png\",\"display\":\"java-01.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/java",
            "ref": "java",
            "specific_type": "java"
          },
          "only_one_per_node": true,
          "ds_key": "[:user_data, \"/library/test/java\"]",
          "basic_type": "language",
          "specific_type": "java"
        },
        "rabbitmq__edge": {
          "ui": {
            "images": {
              "display": "rabbitmq.png",
              "tnail": "rabbitmq.png",
              "tiny": ""
            }
          },
          "display_name": "rabbitmq__edge",
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"rabbitmq.png\",\"display\":\"rabbitmq.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/rabbitmq__edge",
            "ref": "rabbitmq__edge",
            "basic_type": "extension"
          },
          "only_one_per_node": true,
          "ds_key": "[:user_data, \"/library/test/rabbitmq__edge\"]",
          "basic_type": "extension"
        },
        "hadoop": {
          "type": "instance",
          "component_type": "hadoop",
          "ui": {
            "images": {
              "display": "hadoop.png",
              "tnail": "hadoop.png",
              "tiny": ""
            }
          },
          "display_name": "hadoop",
          "description": "Installs hadoop from Cloudera's repo",
          "external_ref": {
            "recipe_name": "hadoop",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"hadoop.png\",\"display\":\"hadoop.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/hadoop",
            "ref": "hadoop",
            "basic_type": "service"
          },
          "only_one_per_node": true,
          "ds_key": "[:user_data, \"/library/test/hadoop\"]",
          "basic_type": "service"
        },
        "hadoop_cloudera_c3__conf_pseudo": {
          "monitoring_item": {
            "check_hadoop_namenode_remotely": {
              "service_name": "hadoop_namenode",
              "display_name": "check_hadoop_namenode_remotely",
              "condition_name": "accessible_over_tcp",
              "enabled": true,
              "condition_description": "this service should be accessible over tcp"
            },
            "check_hadoop_datanode_remotely": {
              "service_name": "hadoop_datanode",
              "display_name": "check_hadoop_datanode_remotely",
              "condition_name": "accessible_over_tcp",
              "enabled": true,
              "condition_description": "this service should be accessible over tcp"
            },
            "check_hadoop_dfs": {
              "service_name": "hadoop_namenode",
              "display_name": "check_hadoop_dfs",
              "enabled": true,
              "condition_description": "a hadoop dfs report is available"
            },
            "check_hadoop_namenode_jmx": {
              "service_name": "hadoop_namenode",
              "display_name": "check_hadoop_namenode_jmx",
              "enabled": true,
              "condition_description": "jmx attributes are monitored",
              "attributes_to_monitor": [
                {
                  "attribute": "FilesTotal",
                  "warning": ">750000",
                  "critical": ">1000000",
                  "object_name": "hadoop:name=FSNamesystemState,service=NameNode"
                },
                {
                  "attribute": "CapacityTotal",
                  "warning": "",
                  "critical": "<20000000",
                  "object_name": "hadoop:name=FSNamesystemState,service=NameNode"
                },
                {
                  "attribute": "HeapMemoryUsage.used",
                  "warning": "",
                  "critical": "",
                  "object_name": "java.lang:type=Memory"
                }
              ],
              "params": [
                "jmxremote_port",
                "jmxremote_password"
              ]
            }
          },
          "type": "instance",
          "component_type": "hadoop_cloudera_c3__conf_pseudo",
          "ui": {
            "images": {
              "display": "cloudera.png",
              "tnail": "cloudera.png",
              "tiny": ""
            }
          },
          "display_name": "hadoop_cloudera_c3__conf_pseudo",
          "description": "Installs hadoop-conf-pseudo and enables hadoop services",
          "external_ref": {
            "recipe_name": "hadoop_cloudera_c3::conf_pseudo",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"cloudera.png\",\"display\":\"cloudera.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/hadoop_cloudera_c3__conf_pseudo",
            "ref": "hadoop_cloudera_c3__conf_pseudo",
            "basic_type": "extension"
          },
          "only_one_per_node": true,
          "attribute": {
            "jmxremote_password": {
              "required": false,
              "is_port": true,
              "display_name": "jmxremote_password",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[hadoop_namenode][jmxremote_password]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "jmxremote_port": {
              "required": false,
              "is_port": true,
              "display_name": "jmxremote_port",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[hadoop_namenode][jmxremote_port]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/hadoop_cloudera_c3__conf_pseudo\"]",
          "basic_type": "extension"
        },
        "nagios__client": {
          "type": "instance",
          "component_type": "nagios__client",
          "ui": {
            "images": {
              "display": "nagios.png",
              "tnail": "nagios.png",
              "tiny": ""
            }
          },
          "display_name": "nagios__client",
          "description": "Installs and configures a nagios client with nrpe",
          "external_ref": {
            "recipe_name": "nagios::client",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"nagios.png\",\"display\":\"nagios.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/nagios__client",
            "ref": "nagios__client",
            "specific_type": "monitoring_agent"
          },
          "only_one_per_node": true,
          "attribute": {
            "sap_config__l4": {
              "required": true,
              "is_port": true,
              "semantic_type": "sap_config__l4",
              "display_name": "sap_config__l4",
              "description": "monitored client service access point",
              "value_asserted": {
                "port": "5666",
                "protocol": "tcp"
              },
              "external_ref": {
                "type": "service_attribute",
                "path": "service[nagios][sap_config__l4]"
              },
              "semantic_type_summary": "sap_config__l4",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/nagios__client\"]",
          "basic_type": "service",
          "specific_type": "monitoring_agent"
        },
        "mysql__server": {
          "monitoring_item": {
            "mysql_basic_health": {
              "service_name": "mysql_server",
              "display_name": "mysql_basic_health",
              "enabled": true,
              "condition_description": "the user 'monitor_user_id' should be able to log into this service",
              "params": [
                "db_info",
                "monitor_user_id"
              ]
            },
            "inet_service_up": {
              "service_name": "mysql_server",
              "display_name": "inet_service_up",
              "condition_name": "accessible_over_tcp",
              "enabled": true,
              "condition_description": "this service should be accessible over tcp",
              "params": [
                "sap"
              ]
            }
          },
          "type": "instance",
          "component_type": "mysql__server",
          "ui": {
            "images": {
              "display": "mysql.png",
              "tnail": "mysql.png",
              "tiny": ""
            }
          },
          "display_name": "mysql__server",
          "description": "Installs packages required for mysql servers w/o manual intervention",
          "external_ref": {
            "recipe_name": "mysql::server",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"mysql.png\",\"display\":\"mysql.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/mysql__server",
            "ref": "mysql__server",
            "specific_type": "mysql_db_server"
          },
          "only_one_per_node": true,
          "attribute": {
            "tunable__key_buffer": {
              "required": false,
              "is_port": false,
              "display_name": "tunable__key_buffer",
              "value_asserted": "250M",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][tunable][key_buffer]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "monitor_user_id": {
              "required": false,
              "is_port": true,
              "display_name": "monitor_user_id",
              "description": "db userid for monitoring application to use",
              "value_asserted": "root",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[mysql_server][monitor_user_id]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "tunable__net_read_timeout": {
              "required": false,
              "is_port": false,
              "display_name": "tunable__net_read_timeout",
              "value_asserted": "30",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][tunable][net_read_timeout]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "tunable__table_cache": {
              "required": false,
              "is_port": false,
              "display_name": "tunable__table_cache",
              "value_asserted": "128",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][tunable][table_cache]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "port": {
              "required": false,
              "is_port": false,
              "display_name": "port",
              "description": "MySQL Server TCP port",
              "value_asserted": "3306",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][port]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "datadir": {
              "required": false,
              "is_port": false,
              "display_name": "datadir",
              "description": "Location of mysql databases",
              "value_asserted": "/var/lib/mysql",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][datadir]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "ec2_path": {
              "required": false,
              "is_port": false,
              "display_name": "ec2_path",
              "description": "Location of mysql directory on EC2 instance EBS volumes",
              "value_asserted": "/mnt/mysql",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][ec2_path]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "db_component": {
              "required": false,
              "is_port": false,
              "display_name": "db_component",
              "value_asserted": "mysql__db",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][db_component]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "tunable__net_write_timeout": {
              "required": false,
              "is_port": false,
              "display_name": "tunable__net_write_timeout",
              "value_asserted": "30",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][tunable][net_write_timeout]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "sap_config__l4": {
              "required": false,
              "is_port": true,
              "semantic_type": {
                ":array": "sap_config__l4"
              },
              "display_name": "sap_config__l4",
              "description": "mysql ip service access point configuration",
              "value_asserted": [
                {
                  "port": "3306",
                  "protocol": "tcp"
                }
              ],
              "external_ref": {
                "type": "service_attribute",
                "path": "service[mysql_server][sap_config__l4]"
              },
              "semantic_type_summary": "sap_config__l4",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "tunable__max_heap_table_size": {
              "required": false,
              "is_port": false,
              "display_name": "tunable__max_heap_table_size",
              "value_asserted": "32M",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][tunable][max_heap_table_size]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "tunable__back_log": {
              "required": false,
              "is_port": false,
              "display_name": "tunable__back_log",
              "value_asserted": "128",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][tunable][back_log]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "tunable__wait_timeout": {
              "required": false,
              "is_port": false,
              "display_name": "tunable__wait_timeout",
              "value_asserted": "180",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][tunable][wait_timeout]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "bind_address": {
              "required": false,
              "is_port": false,
              "display_name": "bind_address",
              "description": "Address that mysqld should listen on",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][bind_address]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "server_root_password": {
              "required": false,
              "is_port": false,
              "display_name": "server_root_password",
              "description": "Randomly generated password for the mysqld root user",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][server_root_password]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "tunable__max_connections": {
              "required": false,
              "is_port": false,
              "display_name": "tunable__max_connections",
              "value_asserted": "800",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[mysql][tunable][max_connections]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "sap__socket": {
              "required": false,
              "is_port": true,
              "semantic_type": "sap__socket",
              "display_name": "sap__socket",
              "description": "mysql unix socket service access point",
              "value_asserted": {
                "socket_file": "/var/run/mysqld/mysqld.sock"
              },
              "external_ref": {
                "type": "service_attribute",
                "path": "service[mysql_server][sap__socket]"
              },
              "semantic_type_summary": "sap__socket",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/mysql__server\"]",
          "basic_type": "service",
          "specific_type": "mysql_db_server"
        },
        "user_account": {
          "type": "instance",
          "component_type": "user_account",
          "ui": {
            "images": {
              "display": "user.png",
              "tnail": "user.png",
              "tiny": ""
            }
          },
          "display_name": "user_account",
          "description": "Installs a user account",
          "external_ref": {
            "recipe_name": "user_account",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"user.png\",\"display\":\"user.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/user_account",
            "only_one_per_node": false,
            "ref": "user_account",
            "basic_type": "user"
          },
          "only_one_per_node": false,
          "attribute": {
            "gid": {
              "required": false,
              "is_port": false,
              "display_name": "gid",
              "description": "Primary group id",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[user_account][gid]"
              },
              "read_only": false,
              "data_type": "integer",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "username": {
              "required": true,
              "is_port": false,
              "display_name": "username",
              "description": "User name",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[user_account][username]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "uid": {
              "required": false,
              "is_port": false,
              "display_name": "uid",
              "description": "Numeric user id",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[user_account][uid]"
              },
              "read_only": false,
              "data_type": "integer",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "shell": {
              "required": false,
              "is_port": false,
              "display_name": "shell",
              "description": "Login shell",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[user_account][shell]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "home_base": {
              "required": false,
              "is_port": false,
              "display_name": "home_base",
              "description": "Home directories base location (home will be $home_base/$username",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[user_account][home_base]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "home": {
              "required": false,
              "is_port": false,
              "display_name": "home",
              "description": "Home directory location",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[user_account][home]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/user_account\"]",
          "basic_type": "user"
        },
        "apache2": {
          "monitoring_item": {
            "inet_service_up": {
              "service_name": "apache2_service",
              "display_name": "inet_service_up",
              "condition_name": "accessible_over_tcp",
              "enabled": true,
              "condition_description": "this service should be accessible over tcp",
              "params": [
                "sap"
              ]
            }
          },
          "type": "instance",
          "component_type": "apache2",
          "ui": {
            "images": {
              "display": "apache.png",
              "tnail": "apache.png",
              "tiny": ""
            }
          },
          "display_name": "apache2",
          "description": "Main Apache configuration",
          "external_ref": {
            "recipe_name": "apache2",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"apache.png\",\"display\":\"apache.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/apache2",
            "ref": "apache2",
            "specific_type": "web_server"
          },
          "only_one_per_node": true,
          "attribute": {
            "dir": {
              "required": false,
              "is_port": false,
              "display_name": "dir",
              "description": "Location for Apache configuration",
              "value_asserted": "/etc/apache2",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][dir]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "timeout": {
              "required": false,
              "is_port": false,
              "display_name": "timeout",
              "description": "Connection timeout value",
              "value_asserted": "300",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][timeout]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "binary": {
              "required": false,
              "is_port": false,
              "display_name": "binary",
              "description": "Apache server daemon program",
              "value_asserted": "/usr/sbin/apache2",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][binary]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "keepaliverequests": {
              "required": false,
              "is_port": false,
              "display_name": "keepaliverequests",
              "description": "Number of requests allowed on a persistent connection",
              "value_asserted": "100",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][keepaliverequests]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "contact": {
              "required": false,
              "is_port": false,
              "display_name": "contact",
              "description": "Email address of webmaster",
              "value_asserted": "ops@example.com",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][contact]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "servertokens": {
              "required": false,
              "is_port": false,
              "display_name": "servertokens",
              "description": "Server response header",
              "value_asserted": "Prod",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][servertokens]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "listen_ports": {
              "required": false,
              "is_port": false,
              "display_name": "listen_ports",
              "description": "Ports that Apache should listen on",
              "value_asserted": [
                "80",
                "443"
              ],
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][listen_ports]"
              },
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "keepalivetimeout": {
              "required": false,
              "is_port": false,
              "display_name": "keepalivetimeout",
              "description": "Time to wait for requests on persistent connection",
              "value_asserted": "5",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][keepalivetimeout]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "sap_config__l4": {
              "required": false,
              "is_port": true,
              "semantic_type": {
                ":array": {
                  "sap_config__l4": {
                    "application": "webserver"
                  }
                }
              },
              "display_name": "sap_config__l4",
              "description": "apache2 ip service access point configuration",
              "value_asserted": [
                {
                  "protocol": "tcp",
                  "ports": [
                    "80",
                    "443"
                  ]
                }
              ],
              "external_ref": {
                "type": "service_attribute",
                "path": "service[apache2_service][sap_config__l4]"
              },
              "semantic_type_summary": "sap_config__l4",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "serversignature": {
              "required": false,
              "is_port": false,
              "display_name": "serversignature",
              "description": "Configure footer on server-generated documents",
              "value_asserted": "On",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][serversignature]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "log_dir": {
              "required": false,
              "is_port": false,
              "display_name": "log_dir",
              "description": "Location for Apache logs",
              "value_asserted": "/etc/apache2",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][log_dir]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "user": {
              "required": false,
              "is_port": false,
              "display_name": "user",
              "description": "User Apache runs as",
              "value_asserted": "www-data",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][user]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "icondir": {
              "required": false,
              "is_port": false,
              "display_name": "icondir",
              "description": "Directory location for icons",
              "value_asserted": "/usr/share/apache2/icons",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][icondir]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "keepalive": {
              "required": false,
              "is_port": false,
              "display_name": "keepalive",
              "description": "HTTP persistent connections",
              "value_asserted": "On",
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[apache2][keepalive]"
              },
              "read_only": false,
              "data_type": "string",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/apache2\"]",
          "basic_type": "service",
          "specific_type": "web_server"
        },
        "mysql__master": {
          "type": "instance",
          "component_type": "mysql__master",
          "ui": {
            "images": {
              "display": "mysql.png",
              "tnail": "mysql.png",
              "tiny": ""
            }
          },
          "display_name": "mysql__master",
          "description": "For extending mysql server to serve as a master",
          "external_ref": {
            "recipe_name": "mysql::master",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"mysql.png\",\"display\":\"mysql.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/mysql__master",
            "ref": "mysql__master",
            "basic_type": "extension"
          },
          "only_one_per_node": true,
          "attribute": {
            "sap_config_for_slave": {
              "required": false,
              "is_port": true,
              "semantic_type": {
                ":array": "sap_config__l4"
              },
              "display_name": "sap_config_for_slave",
              "description": "mysql ip service access point configuration for slave",
              "value_asserted": [
                {
                  "port": "3306",
                  "protocol": "tcp",
                  "application": {
                    "username": "slave",
                    "database": "mysql",
                    "password": null
                  }
                }
              ],
              "external_ref": {
                "type": "service_attribute",
                "path": "service[mysql_server][sap_config_for_slave]"
              },
              "semantic_type_summary": "sap_config__l4",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "master_log": {
              "required": true,
              "is_port": true,
              "semantic_type": "mysql_master_log_info",
              "display_name": "master_log",
              "description": "master log position",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[mysql_server][master_log]"
              },
              "semantic_type_summary": "mysql_master_log_info",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/mysql__master\"]",
          "basic_type": "extension"
        },
        "nagios__server": {
          "type": "instance",
          "component_type": "nagios__server",
          "ui": {
            "images": {
              "display": "nagios.png",
              "tnail": "nagios.png",
              "tiny": ""
            }
          },
          "display_name": "nagios__server",
          "description": "Installs and configures a nagios server",
          "external_ref": {
            "recipe_name": "nagios::server",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"nagios.png\",\"display\":\"nagios.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/nagios__server",
            "ref": "nagios__server",
            "specific_type": "monitoring_server"
          },
          "only_one_per_node": true,
          "attribute": {
            "sap_ref__l4": {
              "required": true,
              "is_port": true,
              "semantic_type": {
                ":array": "sap_ref__l4"
              },
              "display_name": "sap_ref__l4",
              "description": "monitor client service access point ref",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[nagios][sap_ref__l4]"
              },
              "semantic_type_summary": "sap_ref__l4",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/nagios__server\"]",
          "basic_type": "service",
          "specific_type": "monitoring_server"
        },
        "redis": {
          "monitoring_item": {
            "inet_service_up": {
              "service_name": "redis_service",
              "display_name": "inet_service_up",
              "condition_name": "accessible_over_tcp",
              "enabled": true,
              "condition_description": "this service should be accessible over tcp",
              "params": [
                "sap"
              ]
            },
            "redis_basic_health": {
              "service_name": "redis_service",
              "display_name": "redis_basic_health",
              "enabled": true,
              "condition_description": "anonymous user should be able to log into this service",
              "params": [
                "sap"
              ]
            }
          },
          "type": "instance",
          "component_type": "redis",
          "ui": {
            "images": {
              "display": "redis.png",
              "tnail": "redis.png",
              "tiny": ""
            }
          },
          "display_name": "redis",
          "description": "Installs/Configures redis",
          "external_ref": {
            "recipe_name": "redis",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"redis.png\",\"display\":\"redis.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/redis",
            "ref": "redis",
            "basic_type": "service"
          },
          "only_one_per_node": true,
          "attribute": {
            "sap_config__l4": {
              "required": false,
              "is_port": true,
              "semantic_type": {
                ":array": {
                  "sap_config__l4": {
                    "application": "redis"
                  }
                }
              },
              "display_name": "sap_config__l4",
              "description": "redis ip service access point configuration",
              "value_asserted": [
                {
                  "port": null,
                  "protocol": "tcp"
                }
              ],
              "external_ref": {
                "type": "service_attribute",
                "path": "service[redis_service][sap_config__l4]"
              },
              "semantic_type_summary": "sap_config__l4",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/redis\"]",
          "basic_type": "service"
        },
        "postgresql__pgpool": {
          "type": "instance",
          "component_type": "postgresql__pgpool",
          "ui": {
            "images": {
              "display": "postgres.png",
              "tnail": "postgres.png",
              "tiny": ""
            }
          },
          "display_name": "postgresql__pgpool",
          "description": "Installs pgpool load balancer",
          "external_ref": {
            "recipe_name": "postgresql::pgpool",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"postgres.png\",\"display\":\"postgres.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/postgresql__pgpool",
            "ref": "postgresql__pgpool",
            "specific_type": "postgres_db_server"
          },
          "only_one_per_node": true,
          "attribute": {
            "conns_to_real_dbs": {
              "required": false,
              "is_port": true,
              "semantic_type": {
                ":array": "sap_ref__l4"
              },
              "display_name": "conns_to_real_dbs",
              "description": "postgres ip service access point configuration",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[postgresql][conns_to_real_dbs]"
              },
              "semantic_type_summary": "sap_ref__l4",
              "dependency": {
                "attribute_constraint": {
                  "type": "attribute",
                  "display_name": "component_constraint",
                  "description": "Not connecting to Postgres Server",
                  "severity": "error",
                  "search_pattern": {
                    ":filter": [
                      ":eq",
                      ":specific_type",
                      "postgres_db_server"
                    ]
                  }
                }
              },
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            },
            "sap_config__l4": {
              "required": false,
              "is_port": true,
              "semantic_type": {
                ":array": "sap_config__l4"
              },
              "display_name": "sap_config__l4",
              "description": "postgres ip service access point configuration",
              "value_asserted": [
                {
                  "port": 5432,
                  "protocol": "tcp"
                }
              ],
              "external_ref": {
                "type": "service_attribute",
                "path": "service[postgresql][sap_config__l4]"
              },
              "semantic_type_summary": "sap_config__l4",
              "read_only": false,
              "data_type": "json",
              "dynamic": false,
              "hidden": false,
              "cannot_change": false
            }
          },
          "ds_key": "[:user_data, \"/library/test/postgresql__pgpool\"]",
          "basic_type": "service",
          "specific_type": "postgres_db_server"
        },
        "rabbitmq": {
          "ui": {
            "images": {
              "display": "rabbitmq.png",
              "tnail": "rabbitmq.png",
              "tiny": ""
            }
          },
          "display_name": "rabbitmq",
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"rabbitmq.png\",\"display\":\"rabbitmq.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/rabbitmq",
            "ref": "rabbitmq",
            "specific_type": "msg_bus"
          },
          "only_one_per_node": true,
          "ds_key": "[:user_data, \"/library/test/rabbitmq\"]",
          "basic_type": "service",
          "specific_type": "msg_bus"
        },
        "tomcat": {
          "type": "instance",
          "component_type": "tomcat",
          "ui": {
            "images": {
              "display": "server-tomcat.png",
              "tnail": "server-tomcat.png",
              "tiny": ""
            }
          },
          "display_name": "tomcat",
          "description": "Installs and configures Tomcat",
          "external_ref": {
            "recipe_name": "tomcat::default",
            "type": "chef_recipe"
          },
          "dependency": {
            "java": {
              "type": "component",
              "display_name": "java",
              "description": "java is required for tomcat",
              "severity": "warning",
              "search_pattern": {
                ":filter": [
                  ":eq",
                  ":component_type",
                  "java"
                ]
              }
            }
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"server-tomcat.png\",\"display\":\"server-tomcat.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/tomcat",
            "dependency": {
              "java": {
                "required_component": "java"
              }
            },
            "ref": "tomcat",
            "basic_type": "service"
          },
          "only_one_per_node": true,
          "ds_key": "[:user_data, \"/library/test/tomcat\"]",
          "basic_type": "service"
        },
        "hadoop__doc": {
          "type": "instance",
          "component_type": "hadoop__doc",
          "ui": {
            "images": {
              "display": "hadoop.png",
              "tnail": "hadoop.png",
              "tiny": ""
            }
          },
          "display_name": "hadoop__doc",
          "description": "Installs hadoop documentation",
          "external_ref": {
            "recipe_name": "hadoop::doc",
            "type": "chef_recipe"
          },
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"hadoop.png\",\"display\":\"hadoop.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/hadoop__doc",
            "ref": "hadoop__doc",
            "basic_type": "extension"
          },
          "only_one_per_node": true,
          "ds_key": "[:user_data, \"/library/test/hadoop__doc\"]",
          "basic_type": "extension"
        }
      }
    }
  }
}

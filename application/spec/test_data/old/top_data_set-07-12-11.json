{
  "project": {
    "project1": {
      "display_name": "Project 1",
      "description": "Project 1",
      "type": "puppet"
    }
  },
  "datacenter": {
    "target1": {
      "display_name": "Staging East1",
      "description": "Staging East1",
      "iaas_type" : "ec2",
      "iaas_parameters" : {
        "region" : "us-east-1",
        "availability_zone" : "us-east-1a",
	"security_group_set" : ["default"] 
      },     
      "type": "staging",
      "*project_id": "/project/project1"
    }
  },
  "library": {
    "test": {
      "data_source": {
        "chef": {
          "display_name": "chef",
          "data_source_entry": {
            "component_recipe": {
              "ds_is_golden_store": true,
              "display_name": "component_recipe",
              "data_source_entry": {
                "component_monitoring_item": {
                  "ds_is_golden_store": true,
                  "display_name": "component_monitoring_item",
                  "ds_name": "chef",
                  "obj_type": "monitoring_item"
                },
                "component_attribute": {
                  "ds_is_golden_store": true,
                  "display_name": "component_attribute",
                  "data_source_entry": {
                    "attribute_dependency": {
                      "ds_is_golden_store": true,
                      "display_name": "attribute_dependency",
                      "ds_name": "chef",
                      "obj_type": "dependency"
                    }
                  },
                  "ds_name": "chef",
                  "obj_type": "attribute"
                }
              },
              "ds_name": "chef",
              "source_obj_type": "recipe",
              "obj_type": "component"
            }
          },
          "ds_name": "chef",
          "last_collection_timestamp": "Sun Mar 20 06:04:38 +0000 2011"
        },
        "ec2": {
          "display_name": "ec2",
          "data_source_entry": {
            "node_image": {
              "ds_is_golden_store": true,
              "display_name": "node_image",
              "ds_name": "ec2",
              "source_obj_type": "image",
              "obj_type": "node"
            }
          },
          "ds_name": "ec2",
          "last_collection_timestamp": "Sun Mar 20 06:04:51 +0000 2011"
        },
        "user_data": {
          "display_name": "user_data",
          "data_source_entry": {
            "component": {
              "ds_is_golden_store": true,
              "display_name": "component",
              "data_source_entry": {
                "component_dependency": {
                  "ds_is_golden_store": true,
                  "display_name": "dependency",
                  "ds_name": "user_data",
                  "obj_type": "dependency"
                },
                "component_attribute": {
                  "ds_is_golden_store": true,
                  "display_name": "attribute",
                  "data_source_entry": {
                    "attribute_dependency": {
                      "ds_is_golden_store": true,
                      "display_name": "dependency",
                      "ds_name": "user_data",
                      "obj_type": "dependency"
                    }
                  },
                  "ds_name": "user_data",
                  "obj_type": "attribute"
                }
              },
              "ds_name": "user_data",
              "obj_type": "component"
            },
            "node": {
              "ds_is_golden_store": true,
              "display_name": "node",
              "ds_name": "user_data",
              "obj_type": "node"
            }
          },
          "ds_name": "user_data",
          "last_collection_timestamp": "Sun Mar 20 06:04:54 +0000 2011"
        }
      },
      "display_name": "test",
      "node": {
        "ami-ed14d084-micro": {
          "type": "image",
          "ds_source_obj_type": "image",
	  "os_type": "ubuntu",
          "ui": {
            "images": {
              "tnail": "ubuntu.png",
              "display": "ubuntu.png",
              "tiny": ""
            }
          },
          "display_name": "Lucid micro",
          "data_source": "user_data",
          "external_ref": {
	    "size": "t1.micro",
            "type": "ec2_image",
            "image_id": "ami-ed14d084"
          },
          "node_interface": {
            "eth0": {
              "type": "ethernet",
              "display_name": "eth0"
            }
          },
          "attribute": {
            "host_addresses_ipv4": {
              "required": false,
              "dynamic": true,
              "semantic_type": {
                ":array": "host_address_ipv4"
              },
              "display_name": "host_addresses_ipv4",
              "value_asserted": [
                null
              ],
              "cannot_change": false,
              "is_port": true,
              "read_only": true,
              "data_type": "json",
              "semantic_type_summary": "host_address_ipv4",
              "hidden": false
            }
          },
          "monitoring_item": {
            "check_ping": {
              "display_name": "check_ping",
              "description": "ping",
              "enabled": true
            },
            "check_mem": {
              "display_name": "check_mem",
              "description": "Free Memory",
              "enabled": true
            },
            "check_local_procs": {
              "display_name": "check_local_procs",
              "description": "Processes",
              "enabled": true
            },
            "check_all_disks": {
              "display_name": "check_all_disks",
              "description": "Free Space All Disks",
              "enabled": true
            },
            "check_memory_profiler": {
              "display_name": "check_memory_profiler",
              "description": "Memory Profiler",
              "enabled": true
            },
            "check_iostat": {
              "display_name": "check_iostat",
              "description": "Iostat",
              "enabled": true
            },
            "check_ssh": {
              "display_name": "check_ssh",
              "description": "SSH",
              "enabled": true
            }
          },
          "ds_key": "[:user_data, \"/library/test/ami-ed14d084\"]"
        },
        "ami-ed14d084-small": {
          "type": "image",
          "ds_source_obj_type": "image",
	  "os_type": "ubuntu",
          "ui": {
            "images": {
              "tnail": "ubuntu.png",
              "display": "ubuntu.png",
              "tiny": ""
            }
          },
          "display_name": "Lucid small",
          "data_source": "user_data",
          "external_ref": {
	    "size": "m1.small",
            "type": "ec2_image",
            "image_id": "ami-ed14d084"
          },
          "node_interface": {
            "eth0": {
              "type": "ethernet",
              "display_name": "eth0"
            }
          },
          "attribute": {
            "host_addresses_ipv4": {
              "required": false,
              "dynamic": true,
              "semantic_type": {
                ":array": "host_address_ipv4"
              },
              "display_name": "host_addresses_ipv4",
              "value_asserted": [
                null
              ],
              "cannot_change": false,
              "is_port": true,
              "read_only": true,
              "data_type": "json",
              "semantic_type_summary": "host_address_ipv4",
              "hidden": false
            }
          },
          "monitoring_item": {
            "check_ping": {
              "display_name": "check_ping",
              "description": "ping",
              "enabled": true
            },
            "check_mem": {
              "display_name": "check_mem",
              "description": "Free Memory",
              "enabled": true
            },
            "check_local_procs": {
              "display_name": "check_local_procs",
              "description": "Processes",
              "enabled": true
            },
            "check_all_disks": {
              "display_name": "check_all_disks",
              "description": "Free Space All Disks",
              "enabled": true
            },
            "check_memory_profiler": {
              "display_name": "check_memory_profiler",
              "description": "Memory Profiler",
              "enabled": true
            },
            "check_iostat": {
              "display_name": "check_iostat",
              "description": "Iostat",
              "enabled": true
            },
            "check_ssh": {
              "display_name": "check_ssh",
              "description": "SSH",
              "enabled": true
            }
          },
          "ds_key": "[:user_data, \"/library/test/ami-ed14d084\"]"
        },
        "ami-aa37c984": {
          "type": "image",
          "ds_source_obj_type": "image",
	  "os_type": "redhat",
          "ui": {
            "images": {
              "tnail": "redhat.png",
              "display": "redhat.png",
              "tiny": ""
            }
          },
          "display_name": "RHEL 5.5",
          "data_source": "user_data",
          "external_ref": {
            "type": "ec2_image",
            "image_id": "ami-aa37c984"
          },
          "node_interface": {
            "eth0": {
              "type": "ethernet",
              "display_name": "eth0"
            }
          },
          "ds_attributes": {
            "type": "machine",
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "architecture": "i386",
            "description": null,
            "block_device_mapping": [
              {
                "volumeSize": 8,
                "snapshotId": "snap-f9179794",
                "deviceName": "/dev/sda1",
                "deleteOnTermination": "true"
              }
            ],
            "state": "available",
            "is_public": false,
            "kernel_id": "aki-3af50453",
            "owner_id": "411986592491",
            "tags": {
            },
            "virtualizationType": "paravirtual",
            "location": "411986592491/rnp-chef-09-12-mcollective-1-0-redhat-x86_32",
            "name": "rnp-chef-09-12-mcollective-1-0-redhat-x86_32",
            "flavor": {
              "disk": null
            },
            "id": "ami-aa37c984",
            "product_codes": [

            ]
          },
          "attribute": {
            "host_addresses_ipv4": {
              "required": false,
              "dynamic": true,
              "semantic_type": {
                ":array": "host_address_ipv4"
              },
              "display_name": "host_addresses_ipv4",
              "value_asserted": [
                null
              ],
              "cannot_change": false,
              "is_port": true,
              "read_only": true,
              "data_type": "json",
              "semantic_type_summary": "host_address_ipv4",
              "hidden": false
            }
          },
          "monitoring_item": {
            "check_ping": {
              "display_name": "check_ping",
              "description": "ping",
              "enabled": true
            },
            "check_mem": {
              "display_name": "check_mem",
              "description": "Free Memory",
              "enabled": true
            },
            "check_local_procs": {
              "display_name": "check_local_procs",
              "description": "Processes",
              "enabled": true
            },
            "check_all_disks": {
              "display_name": "check_all_disks",
              "description": "Free Space All Disks",
              "enabled": true
            },
            "check_memory_profiler": {
              "display_name": "check_memory_profiler",
              "description": "Memory Profiler",
              "enabled": true
            },
            "check_iostat": {
              "display_name": "check_iostat",
              "description": "Iostat",
              "enabled": true
            },
            "check_ssh": {
              "display_name": "check_ssh",
              "description": "SSH",
              "enabled": true
            }
          },
          "ds_key": "[:user_data, \"/library/test/ami-aa37c984\"]"
        },
        "ami-1738c102": {
          "type": "image",
          "ds_source_obj_type": "image",
	  "os_type": "centos",
          "ui": {
            "images": {
              "tnail": "centos.png",
              "display": "centos.png",
              "tiny": ""
            }
          },
          "display_name": "CentOS 5.3",
          "data_source": "user_data",
          "external_ref": {
            "type": "ec2_image",
            "image_id": "ami-1738c102"
          },
          "node_interface": {
            "eth0": {
              "type": "ethernet",
              "display_name": "eth0"
            }
          },
          "ds_attributes": {
            "type": "machine",
            "root_device_name": "/dev/sda1",
            "root_device_type": "ebs",
            "architecture": "i386",
            "description": null,
            "block_device_mapping": [
              {
                "volumeSize": 8,
                "snapshotId": "snap-f9179794",
                "deviceName": "/dev/sda1",
                "deleteOnTermination": "true"
              }
            ],
            "state": "available",
            "is_public": false,
            "kernel_id": "aki-3af50453",
            "owner_id": "411986592491",
            "tags": {
            },
            "virtualizationType": "paravirtual",
            "location": "411986592491/rnp-chef-09-12-mcollective-1-0-centos-lucid-x86_32",
            "name": "rnp-chef-09-12-mcollective-1-0-centos-x86_32",
            "flavor": {
              "disk": null
            },
            "id": "ami-1738c102",
            "product_codes": [

            ]
          },
          "attribute": {
            "host_addresses_ipv4": {
              "required": false,
              "dynamic": true,
              "semantic_type": {
                ":array": "host_address_ipv4"
              },
              "display_name": "host_addresses_ipv4",
              "value_asserted": [
                null
              ],
              "cannot_change": false,
              "is_port": true,
              "read_only": true,
              "data_type": "json",
              "semantic_type_summary": "host_address_ipv4",
              "hidden": false
            }
          },
          "monitoring_item": {
            "check_ping": {
              "display_name": "check_ping",
              "description": "ping",
              "enabled": true
            },
            "check_mem": {
              "display_name": "check_mem",
              "description": "Free Memory",
              "enabled": true
            },
            "check_local_procs": {
              "display_name": "check_local_procs",
              "description": "Processes",
              "enabled": true
            },
            "check_all_disks": {
              "display_name": "check_all_disks",
              "description": "Free Space All Disks",
              "enabled": true
            },
            "check_memory_profiler": {
              "display_name": "check_memory_profiler",
              "description": "Memory Profiler",
              "enabled": true
            },
            "check_iostat": {
              "display_name": "check_iostat",
              "description": "Iostat",
              "enabled": true
            },
            "check_ssh": {
              "display_name": "check_ssh",
              "description": "SSH",
              "enabled": true
            }
          },
          "ds_key": "[:user_data, \"/library/test/ami-1738c102\"]"
        }
      },
      "component": {
        "php__php5": {
          "type": "template",
          "component_type": "php__php5",
          "basic_type": "language",
          "ui": {
            "images": {
              "tnail": "php.png",
              "display": "php.png",
              "tiny": ""
            }
          },
          "display_name": "php__php5",
          "description": "Install php5 packages and php.ini config file",
          "external_ref": {
            "type": "chef_recipe",
            "recipe_name": "php::php5"
          },
          "only_one_per_node": true,
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"php.png\",\"display\":\"php.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/php__php5",
            "ref": "php__php5",
            "specific_type": "php"
          },
          "specific_type": "php",
          "ds_key": "[:user_data, \"/library/test/php__php5\"]"
        },
        "wordpress": {
          "type": "template",
          "component_type": "wordpress",
          "basic_type": "application",
          "ui": {
            "images": {
              "tnail": "wordpress.png",
              "display": "wordpress.png",
              "tiny": ""
            }
          },
          "display_name": "wordpress",
          "description": "Installs and configures wordpress LAMP stack on a single system",
          "external_ref": {
            "type": "chef_recipe",
            "recipe_name": "wordpress"
          },
          "dependency": {
            "php__php5": {
              "type": "component",
              "display_name": "php__php5",
              "description": "Php5 is required for Wordpress",
              "severity": "warning",
              "search_pattern": {
                ":filter": [
                  ":eq",
                  ":component_type",
                  "php__php5"
                ]
              }
            },
            "apache2": {
              "type": "component",
              "display_name": "apache2",
              "description": "Apache2 is required for Wordpress",
              "severity": "warning",
              "search_pattern": {
                ":filter": [
                  ":eq",
                  ":component_type",
                  "apache2"
                ]
              }
            }
          },
          "only_one_per_node": true,
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"wordpress.png\",\"display\":\"wordpress.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/wordpress",
            "dependency": {
              "php__php5": {
                "required_component": "php__php5"
              },
              "apache2": {
                "required_component": "apache2"
              }
            },
            "ref": "wordpress",
            "specific_type": "php_app"
          },
          "attribute": {
            "db__user": {
              "required": false,
              "dynamic": false,
              "display_name": "db__user",
              "description": "Wordpress will connect to MySQL using this user.",
              "value_asserted": "wordpressuser",
              "cannot_change": false,
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][db][user]"
              },
              "is_port": false,
              "read_only": false,
              "data_type": "string",
              "hidden": false
            },
            "sap_ref__l4": {
              "required": true,
              "dynamic": false,
              "semantic_type": {":array" : "sap_ref__l4"},
              "display_name": "sap_ref__l4",
              "description": "wordpress service access point reference",
              "cannot_change": false,
              "external_ref": {
                "type": "service_attribute",
                "path": "service[wordpress][sap_ref__l4]"
              },
              "is_port": true,
              "read_only": false,
              "data_type": "json",
              "semantic_type_summary": "sap_ref__l4",
              "hidden": false
            },
            "dir": {
              "required": false,
              "dynamic": false,
              "display_name": "dir",
              "description": "Location to place wordpress files.",
              "value_asserted": "/var/www",
              "cannot_change": false,
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][dir]"
              },
              "is_port": false,
              "read_only": false,
              "data_type": "string",
              "hidden": false
            },
            "db__database": {
              "required": false,
              "dynamic": false,
              "display_name": "db__database",
              "description": "Wordpress will use this MySQL database to store its data.",
              "value_asserted": "wordpressdb",
              "cannot_change": false,
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][db][database]"
              },
              "is_port": false,
              "read_only": false,
              "data_type": "string",
              "hidden": false
            },
            "keys__logged_in": {
              "required": false,
              "dynamic": false,
              "display_name": "keys__logged_in",
              "description": "Wordpress logged-in key.",
              "cannot_change": false,
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][keys][logged_in]"
              },
              "is_port": false,
              "read_only": false,
              "data_type": "string",
              "hidden": false
            },
            "keys__nonce": {
              "required": false,
              "dynamic": false,
              "display_name": "keys__nonce",
              "description": "Wordpress nonce key.",
              "cannot_change": false,
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][keys][nonce]"
              },
              "is_port": false,
              "read_only": false,
              "data_type": "string",
              "hidden": false
            },
            "checksum": {
              "required": false,
              "dynamic": false,
              "display_name": "checksum",
              "description": "Checksum of the tarball for the version specified.",
              "value_asserted": "7342627f4a3dca44886c5aca6834cc88671dbd3aa2760182d2fcb9a330807",
              "cannot_change": false,
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][checksum]"
              },
              "is_port": false,
              "read_only": false,
              "data_type": "string",
              "hidden": false
            },
            "db__password": {
              "required": false,
              "dynamic": false,
              "display_name": "db__password",
              "description": "Password for the Wordpress MySQL user.",
              "cannot_change": false,
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][db][password]"
              },
              "is_port": false,
              "read_only": false,
              "data_type": "string",
              "hidden": false
            },
            "version": {
              "required": false,
              "dynamic": false,
              "display_name": "version",
              "description": "Version of Wordpress to download from the Wordpress site.",
              "value_asserted": "2.9.2",
              "cannot_change": false,
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][version]"
              },
              "is_port": false,
              "read_only": false,
              "data_type": "string",
              "hidden": false
            },
            "keys__secure_auth": {
              "required": false,
              "dynamic": false,
              "display_name": "keys__secure_auth",
              "description": "Wordpress secure auth key.",
              "cannot_change": false,
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][keys][secure_auth]"
              },
              "is_port": false,
              "read_only": false,
              "data_type": "string",
              "hidden": false
            },
            "keys__auth": {
              "required": false,
              "dynamic": false,
              "display_name": "keys__auth",
              "description": "Wordpress auth key.",
              "cannot_change": false,
              "external_ref": {
                "type": "chef_attribute",
                "path": "node[wordpress][keys][auth]"
              },
              "is_port": false,
              "read_only": false,
              "data_type": "string",
              "hidden": false
            }
          },
          "specific_type": "php_app",
          "ds_key": "[:user_data, \"/library/test/wordpress\"]"
        },
        "rabbitmq__edge": {
          "component_type": "rabbitmq__edge",
          "basic_type": "extension",
          "ui": {
            "images": {
              "tnail": "rabbitmq.png",
              "display": "rabbitmq.png",
              "tiny": ""
            }
          },
          "display_name": "rabbitmq__edge",
          "only_one_per_node": true,
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"rabbitmq.png\",\"display\":\"rabbitmq.png\",\"tiny\":\"\"}}",
            "basic_type": "extension",
            "qualified_ref": "/library/test/rabbitmq__edge",
            "ref": "rabbitmq__edge"
          },
          "ds_key": "[:user_data, \"/library/test/rabbitmq__edge\"]"
        },
        "nagios__client": {
          "type": "template",
          "component_type": "nagios__client",
          "basic_type": "service",
          "ui": {
            "images": {
              "tnail": "nagios.png",
              "display": "nagios.png",
              "tiny": ""
            }
          },
          "display_name": "nagios__client",
          "description": "Installs and configures a nagios client with nrpe",
          "external_ref": {
            "type": "chef_recipe",
            "recipe_name": "nagios::client"
          },
          "only_one_per_node": true,
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"nagios.png\",\"display\":\"nagios.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/nagios__client",
            "ref": "nagios__client",
            "specific_type": "monitoring_agent"
          },
          "attribute": {
            "sap_config__l4": {
              "required": true,
              "dynamic": false,
              "semantic_type": "sap_config__l4",
              "display_name": "sap_config__l4",
              "description": "monitored client service access point",
              "value_asserted": {
                "port": "5666",
                "protocol": "tcp"
              },
              "cannot_change": false,
              "external_ref": {
                "type": "service_attribute",
                "path": "service[nagios][sap_config__l4]"
              },
              "is_port": true,
              "read_only": false,
              "data_type": "json",
              "semantic_type_summary": "sap_config__l4",
              "hidden": false
            },
            "service_check_input": {
              "semantic_type": "service_check_input",
              "display_name": "service_check_input",
              "description": "service check inputs",
              "external_ref": {
                "type": "service_attribute",
                "path": "service[nagios][service_check_input]"
              },
              "is_port": true,
              "read_only": false,
              "data_type": "json",
              "semantic_type_summary": "service_check_input",
              "hidden": false
            }
          },
          "specific_type": "monitoring_agent",
          "ds_key": "[:user_data, \"/library/test/nagios__client\"]"
        },
        "nagios__server": {
          "type": "template",
          "component_type": "nagios__server",
          "basic_type": "service",
          "ui": {
            "images": {
              "tnail": "nagios.png",
              "display": "nagios.png",
              "tiny": ""
            }
          },
          "display_name": "nagios__server",
          "description": "Installs and configures a nagios server",
          "external_ref": {
            "type": "chef_recipe",
            "recipe_name": "nagios::server"
          },
          "only_one_per_node": true,
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"nagios.png\",\"display\":\"nagios.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/nagios__server",
            "ref": "nagios__server",
            "specific_type": "monitoring_server"
          },
          "attribute": {
            "sap_ref__l4": {
              "required": true,
              "dynamic": false,
              "semantic_type": {
                ":array": "sap_ref__l4"
              },
              "display_name": "sap_ref__l4",
              "description": "monitor client service access point ref",
              "cannot_change": false,
              "external_ref": {
                "type": "service_attribute",
                "path": "service[nagios][sap_ref__l4]"
              },
              "is_port": true,
              "read_only": false,
              "data_type": "json",
              "semantic_type_summary": "sap_ref__l4",
              "hidden": false
            }
          },
          "specific_type": "monitoring_server",
          "ds_key": "[:user_data, \"/library/test/nagios__server\"]"
        },
        "redis": {
          "type": "template",
          "component_type": "redis",
          "basic_type": "service",
          "ui": {
            "images": {
              "tnail": "redis.png",
              "display": "redis.png",
              "tiny": ""
            }
          },
          "display_name": "redis",
          "description": "Installs/Configures redis",
          "external_ref": {
            "type": "chef_recipe",
            "recipe_name": "redis"
          },
          "only_one_per_node": true,
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"redis.png\",\"display\":\"redis.png\",\"tiny\":\"\"}}",
            "basic_type": "service",
            "qualified_ref": "/library/test/redis",
            "ref": "redis"
          },
          "attribute": {
            "sap_config__l4": {
              "required": false,
              "dynamic": false,
              "semantic_type": {
                ":array": {
                  "sap_config__l4": {
                    "application": "redis"
                  }
                }
              },
              "display_name": "sap_config__l4",
              "description": "redis ip service access point configuration",
              "value_asserted": [
                {
                  "port": null,
                  "protocol": "tcp"
                }
              ],
              "cannot_change": false,
              "external_ref": {
                "type": "service_attribute",
                "path": "service[redis_service][sap_config__l4]"
              },
              "is_port": true,
              "read_only": false,
              "data_type": "json",
              "semantic_type_summary": "sap_config__l4",
              "hidden": false
            }
          },
          "monitoring_item": {
            "inet_service_up": {
              "condition_name": "accessible_over_tcp",
              "condition_description": "this service should be accessible over tcp",
              "display_name": "inet_service_up",
              "enabled": true,
              "service_name": "redis_service",
              "params": [
                "sap"
              ]
            },
            "redis_basic_health": {
              "condition_description": "anonymous user should be able to log into this service",
              "display_name": "redis_basic_health",
              "enabled": true,
              "service_name": "redis_service",
              "params": [
                "sap"
              ]
            }
          },
          "ds_key": "[:user_data, \"/library/test/redis\"]"
        },
        "postgresql__pgpool": {
          "type": "template",
          "component_type": "postgresql__pgpool",
          "basic_type": "service",
          "ui": {
            "images": {
              "tnail": "postgres.png",
              "display": "postgres.png",
              "tiny": ""
            }
          },
          "display_name": "postgresql__pgpool",
          "description": "Installs pgpool load balancer",
          "external_ref": {
            "type": "chef_recipe",
            "recipe_name": "postgresql::pgpool"
          },
          "only_one_per_node": true,
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"postgres.png\",\"display\":\"postgres.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/postgresql__pgpool",
            "ref": "postgresql__pgpool",
            "specific_type": "postgres_db_server"
          },
          "attribute": {
            "conns_to_real_dbs": {
              "required": false,
              "dynamic": false,
              "semantic_type": {
                ":array": "sap_ref__l4"
              },
              "display_name": "conns_to_real_dbs",
              "description": "postgres ip service access point configuration",
              "cannot_change": false,
              "external_ref": {
                "type": "service_attribute",
                "path": "service[postgresql][conns_to_real_dbs]"
              },
              "dependency": {
                "attribute_constraint": {
                  "type": "attribute",
                  "display_name": "component_constraint",
                  "description": "Not connecting to Postgres Server",
                  "severity": "error",
                  "search_pattern": {
                    ":filter": [
                      ":eq",
                      ":specific_type",
                      "postgres_db_server"
                    ]
                  }
                }
              },
              "is_port": true,
              "read_only": false,
              "data_type": "json",
              "semantic_type_summary": "sap_ref__l4",
              "hidden": false
            },
            "sap_config__l4": {
              "required": false,
              "dynamic": false,
              "semantic_type": {
                ":array": "sap_config__l4"
              },
              "display_name": "sap_config__l4",
              "description": "postgres ip service access point configuration",
              "value_asserted": [
                {
                  "port": 5432,
                  "protocol": "tcp"
                }
              ],
              "cannot_change": false,
              "external_ref": {
                "type": "service_attribute",
                "path": "service[postgresql][sap_config__l4]"
              },
              "is_port": true,
              "read_only": false,
              "data_type": "json",
              "semantic_type_summary": "sap_config__l4",
              "hidden": false
            }
          },
          "specific_type": "postgres_db_server",
          "ds_key": "[:user_data, \"/library/test/postgresql__pgpool\"]"
        },
        "rabbitmq": {
          "component_type": "rabbitmq",
          "basic_type": "service",
          "ui": {
            "images": {
              "tnail": "rabbitmq.png",
              "display": "rabbitmq.png",
              "tiny": ""
            }
          },
          "display_name": "rabbitmq",
          "only_one_per_node": true,
          "ds_attributes": {
            "ui": "{\"images\": {\"tnail\":\"rabbitmq.png\",\"display\":\"rabbitmq.png\",\"tiny\":\"\"}}",
            "qualified_ref": "/library/test/rabbitmq",
            "ref": "rabbitmq",
            "specific_type": "msg_bus"
          },
          "specific_type": "msg_bus",
          "ds_key": "[:user_data, \"/library/test/rabbitmq\"]"
        },
        "haproxy": {
          "type": "template",
          "ui": {
            "images": {
              "tnail": "haproxy.png",
              "display": "haproxy.png",
              "tiny": ""
            }
          },
          "component_type": "haproxy",
          "basic_type": "service",
          "display_name": "haproxy",
          "description": "Installs and configures haproxy load balancing",
          "external_ref": {
            "type": "chef_recipe",
            "recipe_name": "haproxy"
          },
          "only_one_per_node": true,
          "ds_attributes": {
            "qualified_ref": "/library/test/haproxy",
            "ref": "haproxy",
            "specific_type": "load_balancer"
          },
          "attribute": {
            "conns_to_real_servers": {
              "required": false,
              "dynamic": false,
              "semantic_type": {
                ":array": "sap_ref__l4"
              },
              "display_name": "conns_to_real_servers",
              "description": "service access point configuration",
              "cannot_change": false,
              "external_ref": {
                "type": "service_attribute",
                "path": "service[haproxy][conns_to_real_servers]"
              },
              "is_port": true,
              "read_only": false,
              "data_type": "json",
              "semantic_type_summary": "sap_ref__l4",
              "hidden": false
            },
            "sap_config__l4": {
              "required": false,
              "dynamic": false,
              "semantic_type": {
                ":array": "sap_config__l4"
              },
              "display_name": "sap_config__l4",
              "description": "service access point configuration",
              "value_asserted": [
                {
                  "port": 80,
                  "protocol": "tcp"
                },
                {
                  "port": 443,
                  "protocol": "tcp"
                }
              ],
              "cannot_change": false,
              "external_ref": {
                "type": "service_attribute",
                "path": "service[haproxy][sap_config__l4]"
              },
              "is_port": true,
              "read_only": false,
              "data_type": "json",
              "semantic_type_summary": "sap_config__l4",
              "hidden": false
            }
          },
          "specific_type": "load_balancer",
          "ds_key": "[:user_data, \"/library/test/haproxy\"]"
        }
      }
    }
  }
}

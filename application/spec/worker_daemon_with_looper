#!/usr/bin/env ruby
require 'rubygems'
require 'looper'
require 'rubygems'
require 'json'

#TBD: order below matters
root = File.expand_path('../../', File.dirname(__FILE__))
require root + '/utils/internal/helper/config.rb'
XYZ::Config.process_config_file("/etc/reactor8/worker.conf")
require root + '/project1/app'

class DoSomething
  include Looper
  
  attr_accessor :run
  
  def initialize(config)
    @run = true
    @sleep = config[:sleep].nil? ? 60 : config[:sleep]
  end 

  def body()
    XYZ::MemoryCache.set_cache_servers(XYZ::Config[:memcache_servers] || [])

    XYZ::Config.get_params().each{|p|
      print "config_param #{p} = #{XYZ::Config[p].inspect}\n"
    }
    queue = XYZ::Config[:queue] || ARGV[0] || "default"
    partition_function = XYZ::Config[:partition_function] || lambda{|x|"default"}
    msg_bus_server = XYZ::Config[:msg_bus_server] || "localhost"
    scope = XYZ::Config[:scope]
    c = 2
    attr_ids = XYZ::Object.get_contained_attribute_ids(XYZ::IDHandle[:uri => scope,:c => c])

    w = XYZ::Worker.new(queue)

    attr_ids.each{|id|
      if partition_function.call(id) == queue
        print "adding #{id}\n"
        mp = XYZ::AttributeLinkMessageProcessor.new(XYZ::IDHandle[:c => c, :guid => id])
        w.add_processor(mp) 
      end
    }
    w.start(msg_bus_server)  
  end
  
  def run
    loopme(@sleep) do
      begin
        body()
      rescue Exception => e
        puts "found problem; stopping,#{e.inspect}\n"
        @run = false
      end
    end
  end
end

# and here's how we kick it off:
DoSomething.new( { :sleep => 10 } ).run


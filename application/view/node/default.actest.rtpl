

<div id="foome" style="height: 300px; width: 600px; border: 1px solid green;">
<br/>
<input size="35" type="text" name="foo" id="foo" value=""/>
<br/>
<ul id="mytree"></ul>
</div>

<script type="text/javascript">
var states = [
  'Alabama',
  'Alaska',
  'Arizona',
  'Arkansas',
  'California',
  'Colorado',
  'Florida',
  'New York',
  'Louisiana',
  'Washington',
];

function tester2() {
	YUI(YUI_config).use("autocomplete", "autocomplete-highlighters", function (Y) {
	  Y.one('#foo').plug(Y.Plugin.AutoComplete, {
	    resultHighlighter: 'phraseMatch',
	    resultListLocator: 'users',
	    resultTextLocator: 'username',
	    source: 'http://github.com/api/v2/json/user/search/{query}?callback={callback}'
	  });
	});
}

function tester(foo) {
YUI(YUI_config).use("autocomplete", "autocomplete-highlighters", "datasource-get", function (Y) {
  // Create a DataSource instance.
  var ds = new Y.DataSource.Get({
    source: 'http://query.yahooapis.com/v1/public/yql?format=json'
  });
 
  Y.one('#foo').plug(Y.Plugin.AutoComplete, {
    maxResults: 10,
    resultHighlighter: 'wordMatch',
    resultTextLocator: 'name',
 
    // Use the DataSource instance as the result source.
    source: ds,
 
    // YQL query to use for each request (URL-encoded, except for the
    // {query} placeholder). This will be appended to the URL that was supplied
    // to the DataSource's "source" config above.
    requestTemplate: '&q=select%20*%20from%20music.artist.search%20where%20keyword%3D%22{query}%22',
 
    // Custom result list locator to parse the results out of the YQL response.
    // This is necessary because YQL sometimes returns an array of results, and
    // sometimes just a single result that isn't in an array.
    resultListLocator: function (response) {
console.log(response);
      var results = response[0].query.results &&
            response[0].query.results.Artist;
 
      if (results && !Y.Lang.isArray(results)) {
        results = [results];
      }
 
      return results || [];
    }
  });
});

}

var snucka = null;

function initShite() {
	YUI(YUI_config).use("autocomplete", "autocomplete-filters", "autocomplete-highlighters", function (Y) {
		snucka = Y.one('#foo').plug(Y.Plugin.AutoComplete, {
			resultFilters    : 'startsWith',
			resultHighlighter: 'startsWith',
			source: '{%=_app[:base_uri]%}/xyz/node/ac_remotesearch.json',
			requestTemplate	 : '?q_str={query}',
			resultListLocator: function (response) {
				var result_list = response.application_node_ac_remotesearch.content[0].data;
				return result_list;
			}
		});
console.log(snucka);
	});
}

function testGallery() {

YUI_config['modules']['gallery-yui3treeview'] = {
//	fullpath : "../../../../yui3-gallery/build/gallery-yui3treeview/gallery-yui3treeview.js",
	requires : ["substitute", "widget", "widget-parent", "widget-child","node-focusmanager"],
	base: '{%=_app[:base_js_uri]%}/external/yui/gallery/'
}

YUI({gallery: 'gallery-2011.01.03-18-30'}).use('gallery-yui3treeview', function(Y) {
//YUI(YUI_config).use('gallery-yui3treeview', function(Y) {
	var treeview = new Y.TreeView({ 
			srcNode: '#mytree',
			contentBox: null,
			type: "TreeView",
			children: [
			{
				label: "level1-1",
				type: "TreeView",
				children: [{label: "level2-1"},{label: "level2-2"}]
			},
			{
				type: "TreeView",
				label : "level1-2"
			}
			]
		});
	treeview.render();
});

}

</script>
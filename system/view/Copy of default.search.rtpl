<script type="text/javascript">
var field_defs = {
	'node' : {
		'field_defs' :{
			'display_name': {
				'i18n': 'Display Name',
				'type' : 'text',
			},
			'operational_status': {
				'i18n':'Op Status',
				'type' : 'select',
			},
			'image_size' : {
				'i18n' : 'Image Size',
				'type' : 'text'
			}
		},
	}
};

var optionsList = {
	'operational_status': {
		'good' : 'Good',
		'inactive' : 'Inactive',
		'bad' : 'Bad',
		'warning' : 'Warning'
	}
}

var availOperators = {
	'text' : {
		'match-prefix' : 'Starts With',
		'eq':'Equals',
		'contains':'Contains',
		'regex':'Matches Regex'
	},
	'integer' : {
		'eq':'==',
		'lt':'<',
		'gt':'>',
		'lte':'<=',
		'gte':'>=',
		'ne':'!='
	},
	'select' : {
		'eq':'Equals',
		'oneof':'Is One Of'
	},
	'multiselect' : {
		'eq':'Equals',
		'oneof':'Is One Of'
	},
};

function initSearch() {
	var searchAttrs = R8.Utils.Y.one('#{%=model_name%}-search-attrs');
	var scatClick = R8.Utils.Y.delegate('click',toggleSearchAttr,searchAttrs,'.saved-search-cat');
}

function toggleSearchAttr(e) {
	var clickedAttr = e.currentTarget;
	var clickedAttrId = clickedAttr.get('id');
	var clickedAttrName = clickedAttrId.replace('-search-attr','');

	var parentNode = clickedAttr.get('parentNode');
	var attrList = parentNode.get('children');
	attrList.each(function() {
		if(this.get('id') != clickedAttrId && this.get('id') != 'spacer') {
			this.removeClass('selected');

			var attrId = this.get('id');
			R8.Utils.Y.one('#'+attrId+'-body').setStyle('display','none');
			var attrName = attrId.replace('-search-attr','');
		}
	});
	clickedAttr.addClass('selected');
	R8.Utils.Y.one('#'+clickedAttrId+'-body').setStyle('display','block');
}

function updateFilterField(fieldId,fieldName) {
//DEBUG
var filterId = 'filter01';

	var fieldElem = R8.Utils.Y.one('#'+fieldId);
	var modelName = fieldElem.getAttribute('data-model');
	var fieldDef = getFieldDef(modelName,fieldName);
	var possibleOperators = availOperators[fieldDef['type']];
	var operatorSelect = document.getElementById(filterId+'-operator');
	operatorSelect.options.length = 0;
	operatorSelect.setAttribute('data-field',fieldName);

	for(operator in possibleOperators) {
		var numOptions = operatorSelect.options.length;
		var defaultSelected = (numOptions == 0) ? true : false;
		operatorSelect.options[numOptions] = new Option(possibleOperators[operator],operator,defaultSelected,false);
	}


	//reset and update the condition field
	updateSearchCondition(modelName,fieldName,operatorSelect.options[operatorSelect.selectedIndex].value);
}

function updateSearchCondition(modelName,fieldName,operator) {
	var conditionWrapper = R8.Utils.Y.one('#'+modelName+'-sf-condition-wrapper');
	conditionWrapper.set('innerHTML','');
	var inputElem = getConditionInput(modelName,fieldName,operator);

	conditionWrapper.appendChild(inputElem);
}

function getConditionInput(modelName,fieldName,operator) {
	var fieldDef = getFieldDef(modelName,fieldName);

//DEBUG
//temp hack until figuring out how to best ID filters to make globaly unique on page
	var filterId = 'filter01';

	switch(fieldDef['type']) {
		case "text":
			var inputElem = document.createElement('input');
			inputElem.setAttribute('id',filterId+'-condition');
			inputElem.setAttribute('name',filterId+'-condition');
			inputElem.setAttribute('type','text');
			inputElem.setAttribute('size','25');
			break;
		case "multiselect":
		case "select":
			var multiselect = false;
			if(operator == 'oneof') {
				multiselect = true;
			}
			var inputElem = document.createElement('select');
			inputElem.setAttribute('id',filterId+'-condition');
			inputElem.setAttribute('name',filterId+'-condition');
			(multiselect == true) ? inputElem.setAttribute('multiple','1') : null;

			var availOptions = getFieldOptions(modelName,fieldName);
			for(option in availOptions) {
				var numOptions = inputElem.options.length;
				inputElem.options[numOptions] = new Option(availOptions[option],option,false,false);
			}
			break;
		case "integer":
			var inputElem = document.createElement('input');
			inputElem.setAttribute('id',filterId+'-condition');
			inputElem.setAttribute('name',filterId+'-condition');
			inputElem.setAttribute('type','text');
			inputElem.setAttribute('size','25');
			break;
	}

	return inputElem;
}

function getFieldOptions(modelName,fieldName) {
	var fieldDef = getFieldDef(modelName,fieldName);
	return optionsList[fieldName];
}

function getFieldDef(modelName,fieldName) {
	return field_defs[modelName]['field_defs'][fieldName];
}

function getModelFieldDefs(modelName) {
	return field_defs[modelName];
}

function updateFilterOperator(operatorId) {
	var operatorElem = R8.Utils.Y.one('#'+operatorId);
	var modelName = operatorElem.getAttribute('data-model');
	var fieldName = operatorElem.getAttribute('data-field');
	var fieldDef = getFieldDef(modelName,fieldName);

	var operator = operatorElem.get('options').item(operatorElem.get('selectedIndex')).get('value');

	//reset and update the condition field
	updateSearchCondition(modelName,fieldName,operator);
}

function saveFilter(filterId) {
	var filterElem = R8.Utils.Y.one('#'+filterId);

	if(filterElem == null) {
		addFilter(filterId);
	} else {
		updateFilter(filterId);
	}
}

function addFilter(filterId) {
	var fieldElem = R8.Utils.Y.one('#'+filterId+'-field');
	var modelName = fieldElem.getAttribute('data-model');
	var fieldName = fieldElem.get('value');
	var fieldDef = getFieldDef(modelName,fieldName);
	var fieldLabel = fieldDef['i18n'];

	var fieldOpElem = R8.Utils.Y.one('#'+filterId+'-operator');
	var fieldOperator = availOperators[fieldDef['type']][fieldOpElem.get('value')];
	var test = fieldOpElem.get('value');

	var fieldCondElem = R8.Utils.Y.one('#'+filterId+'-condition');
	var fieldCondition = fieldCondElem.get('value');

	switch(fieldDef['type']) {
		case "select":
			fieldCondition = "'" + optionsList[fieldName][fieldCondition] + "'";
		case "multiselect":
			var valueList = [];
			fieldCondElem.get('options').each(function(){
				if(this.get('selected') == true) valueList[valueList.length] = this.get('value');
			});
			var newCondition = '';
			for(index in valueList) {
				(newCondition !='') ? newCondition = newCondition+',' : null;
				newCondition = newCondition + optionsList[fieldName][valueList[index]];
			}
			fieldCondition = newCondition;
			break;
	}
	var filterStr = fieldLabel+' '+fieldOperator+' '+fieldCondition;

					<div id="filter0X" class="search-filter">
						<div class="search-filter-value">Display Name Equals 'foo'</div>
						<div class="search-remove-filter"></div>
					</div>
	var filterElem = document.createElement('div');
	filterElem.setAttribute('id',filterId);
	filterElem.setAttribute('class','search-filter');
	filterElem.innerHTML = '\
		<div class="search-filter-value">'+filterStr+'</div>\
		<div class="search-remove-filter"></div>\
	';

	var filterListElem = R8.Utils.Y.one('#'+modelName+'-filter-list');
	filterListElem.appendChild(filterElem);
//console.log(fieldLabel+' '+fieldOperator+' '+fieldCondition);
}

function addFilter(modelName) {
	var fieldELem = getFilterFieldOptions(modelName);


}

function getFilterFieldOptions(modelName) {

	var tempId = R8.Utils.Y.guid();
	var availFieldsElem = document.createElement('select');
	availFieldsElem.setAttribute('id',tempId+'-condition');
	availFieldsElem.setAttribute('name',tempId+'-condition');
	availFieldsElem.setAttribute('data-new-filter','true');

	var fieldDefs = getModelFieldDefs(modelName);
	for(field in fieldDefs) {
		var numOptions = availFieldsElem.options.length;
		availFieldsElem.options[numOptions] = new Option(fieldDefs[field]['i18n'],field,false,false);
	}
	return availFieldsElem;
}

</script>
<div class="search-container">
	<div style="height: 30px; width: 800px; float: left; background-color: #FFFFFF;">
		<div style="margin: 4px 0 0 5px; float: left;">
			<a href="javascript:initSearch();">Init</a>||||
			<a href="javascript:R8.Search.tester('{%=model_name%}');">Test</a>||||
			<a href="javascript:R8.Search.toggleSearch('{%=model_name%}');">Search&nbsp;&gt;&gt;</a>
		</div>
		<div style="margin: 4px 0 0 10px; float: left;">
			<select name="{%=model_name%}-saved-search">
				<option value="foo">All Nodes</option>
				<option value="foo">Ubuntu Machines</option>
				<option value="foo">Good Status</option>
				<option value="foo">Large Nodes</option>
			</select>
		</div>
	</div>
	<div id="{%=model_name%}-search-panel" style="display: none; float:left; width: 887px; background-color: #DDDDDD;">
		<div id="{%=model_name%}-search-attrs" class="saved-search-categories">
			<div id="spacer" style="height: 40px; width: 100px;"></div>
			<div id="old-search-attr" class="saved-search-cat selected"><div class="label">Old</div></div>
			<div id="filters-search-attr" class="saved-search-cat"><div class="label">Filters</div></div>
			<div id="ordering-search-attr" class="saved-search-cat"><div class="label">Ordering</div></div>
		</div>
		<div id="old-search-attr-body" style="float: left; width: 780px;">
			<form id="{%=model_name%}-search-form" action="{%=base_uri%}/xyz/{%=model_name%}/list" method="post" enctype="multipart/form-data">
			<div style="margin-left: 5px;">
				<input type="submit" value="Search"/>&nbsp;&nbsp;&nbsp;&nbsp;
				<b>Save with Given Name:</b><input type="text" size="25" id="{%=model_name%}_search_name" name="{%=model_name%}_search_name" value=""/>
			</div>
			{%for field in h_field_list%}
				<input type="hidden" name="{%=field[:name]%}" id="{%=field[:id]%}" value="{%=field[:value]%}" />
			{%end%}
			<table class="edit">
			{%for row in rows%}
				<tr id="{%=row[:rowId]%}">
					{%for col in row[:cols]%}
						<td id="{%=col[:colId]%}" class="{%=col[:class]%}">{%=col[:content]%}</td>
					{%end%}
				</tr>
			{%end%}
			</table>
			</form>
		</div>
		<div id="filters-search-attr-body" class="search-attr-body">
			<div class="search-filter-wrapper">
				<div class="filter-header">
					<div style="margin: 0 auto;">
						Filter List
						<div class="search-add-filter" onclick="addFilter('{%=model_name%}');"></div>
					</div>
				</div>
				<div id="{%=model_name%}-filter-list" class="filter-list">
<!--
					<div id="filter0X" class="search-filter">
						<div class="search-filter-value">Display Name Equals 'foo'</div>
						<div class="search-remove-filter"></div>
					</div>
-->
				</div>
			</div>
			<div style="float: left; height: 150px; width: 5px; background-color: #AACCEE"></div>
			<div style="float: left; height: 150px; width: 475px; background-color: #FFFFFF;">
				<div style="width: 475px; height: 30px; border-bottom: 1px solid #AACCEE;">
					<div style="font-weight: bold; font-size: 13px">Filter Details</div>
				</div>
				<div id="filter01-params">
					<div style="width: 100%;">
						<div style="margin: 10px 0 10px 5px; width: 100%;">
							<div style="float: left;">
							<select id="filter01-field" name="filter01-field" data-model="{%=model_name%}" onchange="updateFilterField(this.id,this.options[this.selectedIndex].value);">
								<option value="display_name">Display Name</option>
								<option value="operational_status">Op Status</option>
								<option value="image_size">Image Size</option>
							</select>
							</div>
							<div style="float: left;">
							<select id="filter01-operator" name="filter01-filter"  data-model="{%=model_name%}" data-field="" onchange="updateFilterOperator(this.id);">
								<option value="match-prefix">Starts With</option>
								<option value="eq">Equals</option>
								<option value="contains">Contains</option>
								<option value="regex">Matches Regex</option>
							</select>
							</div>
							<div id="{%=model_name%}-sf-condition-wrapper" style="float: left;">
								<input id="filter01-condition" name="filter01-condition" type="text" size="25" value=""/>
							</div>
						</div>
					</div>
					<br/><br/>
					<div style="float: left; bottom: 0px; margin-left: 5px;">
						<input type="button" value="Save" onclick="saveFilter('filter01');"/>
					</div>
				</div>
			</div>
		</div>
		<div id="ordering-search-attr-body" class="search-attr-body">
			ORDER BY
		</div>
	</div>
</div>
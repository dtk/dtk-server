<script type="text/javascript">
/*
var field_defs = {
	'node' : {
		'field_defs' :{
			'display_name': {
				'i18n': 'Display Name',
				'type' : 'text',
			},
			'operational_status': {
				'i18n':'Op Status',
				'type' : 'select',
			},
			'image_size' : {
				'i18n' : 'Image Size',
				'type' : 'text'
			}
		},
	}
};

var optionsList = {
	'operational_status': {
		'good' : 'Good',
		'inactive' : 'Inactive',
		'bad' : 'Bad',
		'warning' : 'Warning'
	}
}

var availOperators = {
	'text' : {
		'match-prefix' : 'Starts With',
		'eq':'Equals',
		'contains':'Contains',
		'regex':'Matches Regex'
	},
	'integer' : {
		'eq':'==',
		'lt':'<',
		'gt':'>',
		'lte':'<=',
		'gte':'>=',
		'ne':'!='
	},
	'select' : {
		'eq':'Equals',
		'oneof':'Is One Of'
	},
	'multiselect' : {
		'eq':'Equals',
		'oneof':'Is One Of'
	},
};

function loadFilter(e) {
	var filterId = e.currentTarget.get('id');
//TODO: remove stub
var searchId = 'foo';
	var searchObj = getSearchObj(searchId);
	var filterEditWrapper = R8.Utils.Y.one('#tempId-filter-edit-wrapper');
	filterEditWrapper.set('innerHTML','');

	var filterList = R8.Utils.Y.one('#{%=model_name_literal%}-filter-list');
	var filterIndex = 0;
	var foundIndex = false;
	filterList.get('children').each(function(){
		if(foundIndex != true) {
			if(this.get('id') == filterId) {
				foundIndex = true;
			} else {
				foundIndex = false;
				filterIndex++;
			}
		}
	});
	var modelName = searchObj['search_pattern'][':relation'];

	filterDef = searchObj['search_pattern'][':filter'][filterIndex+1];
	var fieldName = filterDef[1].replace(':','');

	renderFilterEdit(modelName,filterId,filterDef);
}

function getFilterDef(searchId,filterId) {
	
}

function updateFilterField(fieldId,fieldName) {
	var filterId = fieldId.replace('-field','');
	var fieldElem = R8.Utils.Y.one('#'+filterId+'-field');
	var modelName = fieldElem.getAttribute('data-model');
	var fieldDef = getFieldDef(modelName,fieldName);
	var possibleOperators = getAvailOperators(fieldDef['type']);
	var operatorSelect = document.getElementById(filterId+'-operator');
	operatorSelect.options.length = 0;
	operatorSelect.setAttribute('data-field',fieldName);

	for(operator in possibleOperators) {
		var numOptions = operatorSelect.options.length;
		var defaultSelected = (numOptions == 0) ? true : false;
		operatorSelect.options[numOptions] = new Option(possibleOperators[operator],operator,defaultSelected,false);
	}

	//reset and update the condition field
	updateFilterCondition({
		'model_name':modelName,
		'field_name':fieldName,
		'operator':operatorSelect.options[operatorSelect.selectedIndex].value,
		'filter_id':filterId
	});
}

function updateFilterCondition(params) {
	var filterId = params['filter_id'];
	var modelName = params['model_name'];
	var fieldName = params['field_name'];
	var operator = params['operator'];

	var filterWrapper = document.getElementById(filterId+'-filter-wrapper');
	var conditionElem = document.getElementById(filterId+'-condition');
	filterWrapper.removeChild(conditionElem);

	var fieldDef = getFieldDef(modelName,fieldName);
	var inputElem = getConditionInput({
		'field_name':fieldName,
		'field_def':fieldDef,
		'operator':operator,
		'filter_id':filterId
	});

	filterWrapper.appendChild(inputElem);
}

function getConditionInput(params) {
	var fieldName = params['field_name'];
	var fieldDef = params['field_def'];
	var operator = params['operator'];
	var filterId = params['filter_id'];
	var filterDef = params['filter_def'];

	switch(fieldDef['type']) {
		case "text":
			var inputElem = document.createElement('input');
			inputElem.setAttribute('id',filterId+'-condition');
			inputElem.setAttribute('name',filterId+'-condition');
			inputElem.setAttribute('type','text');
			inputElem.setAttribute('size','25');

			(filterDef != null && typeof(filterDef) !='undefined') ? inputElem.value = filterDef[2] : null;
			break;
		case "multiselect":
		case "select":
			var multiselect = false;
			if(operator == 'oneof') {
				multiselect = true;
			}
			var inputElem = document.createElement('select');
			inputElem.setAttribute('id',filterId+'-condition');
			inputElem.setAttribute('name',filterId+'-condition');
			(multiselect == true) ? inputElem.setAttribute('multiple','1') : null;

			var availOptions = getFieldOptions(fieldName);
			for(option in availOptions) {
				var numOptions = inputElem.options.length;

				var selected = false;

				if(typeof(filterDef) !='undefined') {
					if(filterDef[2] instanceof Array) {
						(R8.Utils.in_array(filterDef[2],option)) ? selected = true : selected = false;
					} else {
						(filterDef[2] == option) ? selected = true : selected = false;
					}
				}
				inputElem.options[numOptions] = new Option(availOptions[option],option,false,selected);
			}
			break;
		case "integer":
			var inputElem = document.createElement('input');
			inputElem.setAttribute('id',filterId+'-condition');
			inputElem.setAttribute('name',filterId+'-condition');
			inputElem.setAttribute('type','text');
			inputElem.setAttribute('size','25');
			break;
	}

	return inputElem;
}

function getFieldOptions(optionsKey) {
	return optionsList[optionsKey];
}

function getFieldDef(modelName,fieldName) {
	return field_defs[modelName]['field_defs'][fieldName];
}

function getAvailOperators(fieldType) {
	return availOperators[fieldType];
}

function getModelFieldDefs(modelName) {
	return field_defs[modelName]['field_defs'];
}

function updateFilterOperator(operatorId) {
	var operatorElem = R8.Utils.Y.one('#'+operatorId);
	var filterId = operatorElem.get('id').replace('-operator','');
	var filterField = R8.Utils.Y.one('#'+filterId+'-field');
	var modelName = filterField.getAttribute('data-model');
	var fieldName = filterField.get('value');
	var fieldDef = getFieldDef(modelName,fieldName);

	var operator = operatorElem.get('options').item(operatorElem.get('selectedIndex')).get('value');

	//reset and update the condition field
	updateFilterCondition({
		'model_name':modelName,
		'field_name':fieldName,
		'operator':operator,
		'filter_id':filterId
	});
}

//TODO: remove stub
var devTestSearchObj = {
	'id':'',
	'name':'foobar',
	'search_pattern': {
		':columns':[],
		':relation':'node',
		':filter':[
		],
		':order_by':[],
		':paging':''
	},
	'save':'true'
};

function getSearchObj(searchId) {
	return devTestSearchObj;
}

function setSearchObj(searchId,searchObj) {
	devTestSearchObj = searchObj;
}

//TODO: remove devTestSearchObj stub
function pushFilters(searchId,filterDefs) {
	var searchDef = getSearchObj(searchId);

	if(devTestSearchObj['search_pattern'][':filter'].length == 0) devTestSearchObj['search_pattern'][':filter'].push(":and"); 

	for(filter in filterDefs) {
		devTestSearchObj['search_pattern'][':filter'].push(filterDefs[filter]);
	}
}

function updateExistingFilter(searchId,filterIndex,filterDef) {
	var searchDef = getSearchObj(searchId);
//	searchDef['search_pattern'][':filter'][filterIndex+1] = filterDef;
	devTestSearchObj['search_pattern'][':filter'][filterIndex+1] = filterDef;
}

function saveFilter(filterId) {
	var filterElem = R8.Utils.Y.one('#'+filterId);

	if(filterElem == null) {
		persistFilter(filterId);
	} else {
		persistFilter(filterId,true);
	}
}

//[":and", [":eq", ":foo","some string"], [":oneof", ":col", ["val1","val2","val3"]]]
function persistFilter(filterId,updateFilter) {
	var fieldElem = R8.Utils.Y.one('#'+filterId+'-field');
	var modelName = fieldElem.getAttribute('data-model');
	var fieldName = fieldElem.get('value');

	var fieldDef = getFieldDef(modelName,fieldName);
	var fieldLabel = fieldDef['i18n'];

	var fieldOpElem = R8.Utils.Y.one('#'+filterId+'-operator');
	var fieldOperator = availOperators[fieldDef['type']][fieldOpElem.get('value')];

	var fieldCondElem = R8.Utils.Y.one('#'+filterId+'-condition');
	var fieldCondition = fieldCondElem.get('value');

	var filterDef = [":"+fieldOpElem.get('value'),":"+fieldName];

	switch(fieldOpElem.get('value')) {
		case "oneof":
			var valueList = [];
			fieldCondElem.get('options').each(function(){
				if(this.get('selected') == true) {
					valueList[valueList.length] = this.get('value');
				}
			});
			filterDef.push(valueList);

			var newCondition = '';
			for(index in valueList) {
				(newCondition !='') ? newCondition = newCondition+',' : null;
				newCondition = newCondition + optionsList[fieldName][valueList[index]];
			}
			fieldCondition = newCondition;
			break;
		case "eq":
		case "match-prefix":
		case "contains":
			filterDef.push(fieldCondition);

			if(fieldDef['type'] == 'select') {
				fieldCondition = "'"+optionsList[fieldName][fieldCondition]+"'";
			} else {
				fieldCondition = "'"+fieldCondition+"'";
			}
			break;
		default:
			filterDef.push(fieldCondition);
			break;
	}
	var filterStr = fieldLabel+' '+fieldOperator+' '+fieldCondition;

//TODO: figure out best way to handle id's
var searchId = 'foo';

	if(typeof(updateFilter) == 'undefined' || updateFilter == false) {
		var filterElem = document.createElement('div');
		filterElem.setAttribute('id',filterId);
		filterElem.setAttribute('class','search-filter');
		filterElem.innerHTML = '\
			<div class="search-filter-value">'+filterStr+'</div>\
			<div class="search-remove-filter"></div>\
		';
	
		var filterListElem = R8.Utils.Y.one('#'+modelName+'-filter-list');
		filterListElem.appendChild(filterElem);

		pushFilters(searchId,[filterDef]);
	} else if(updateFilter == true) {
		var filterElem = R8.Utils.Y.one('#'+filterId);
		filterElem.get('children').item(0).set('innerHTML',filterStr);

//TODO: centralize this as a reusable function
		var filterList = R8.Utils.Y.one('#{%=model_name_literal%}-filter-list');
		var filterIndex = 0;
		var foundIndex = false;
		filterList.get('children').each(function(){
			if(foundIndex != true) {
				if(this.get('id') == filterId) {
					foundIndex = true;
				} else {
					foundIndex = false;
					filterIndex++;
				}
			}
		});
		updateExistingFilter(searchId,filterIndex,filterDef);
	}
}

function renderFilterEdit(modelName,searchId,searchGiud,filterDef) {
	var filterEditWrapper = R8.Utils.Y.one('#'+searchId+'-filter-edit-wrapper');
	filterEditWrapper.set('innerHTML','');

	(typeof(filterDef) !='undefined') ? fieldName = filterDef[1].replace(':','') : fieldName = null;

	if(searchGuid == '') {
		var numFilters = getFilter
	}
return;

//	var filterId = (R8.Search.searchObjList[searchGuid

	var fieldElem = getFilterFieldOptions({
		'model_name':modelName,
		'field_name':fieldName,
		'filter_id':filterId
	});
	var fieldDef = getFieldDef(modelName,fieldElem.value);
	var elemId = fieldElem.getAttribute('id');
	var filterId = elemId.replace('-field','');

	var filterWrapper = document.createElement('div');
	filterWrapper.setAttribute('id',searchId+'-filter-wrapper');
	filterWrapper.setAttribute('style','float:left; width: 100%; height: 80px;');

	//add field select list
	filterWrapper.appendChild(fieldElem);


	//add field operator select list
	(typeof(filterDef) !='undefined') ? operator = filterDef[0].replace(':','') : operator = null;
	var fieldOperatorsElem = getFilterOperatorOptions({
		'field_def':fieldDef,
		'operator':operator,
		'filter_id':filterId
	});
	filterWrapper.appendChild(fieldOperatorsElem);

	//add field condition input
	var fieldConditionElem = getConditionInput({
		'field_name':fieldElem.value,
		'field_def':fieldDef,
		'operator':fieldOperatorsElem.value,
		'filter_def':filterDef,
		'filter_id':filterId
	});
	filterWrapper.appendChild(fieldConditionElem);

	var filterEditWrapper = R8.Utils.Y.one('#'+searchId+'-filter-edit-wrapper');
	filterEditWrapper.appendChild(filterWrapper);

	//add save button
	var saveBtnElem = getFilterSaveBtn(filterId);
	filterEditWrapper.appendChild(saveBtnElem);

}

function getFilterSaveBtn(filterId) {
	var tempId = 'tempId-filter-edit-wrapper';

	var btnWrapper = document.createElement('div');
	btnWrapper.setAttribute('style','bottom: 0px; margin-left: 5px;');

	var btnElem = document.createElement('input');
	btnElem.setAttribute('type','button');
//TODO: i18n this garb
	btnElem.value = 'Save';
	btnElem.onclick = function() {
		saveFilter(filterId);
		var filterEditWrapper = R8.Utils.Y.one('#tempId-filter-edit-wrapper');
		filterEditWrapper.set('innerHTML','');
	}

	var cancelBtnElem = document.createElement('input');
	cancelBtnElem.setAttribute('type','button');
//TODO: i18n this garb
	cancelBtnElem.value = 'Cancel';
	cancelBtnElem.onclick = function() {
		var filterEditWrapper = R8.Utils.Y.one('#tempId-filter-edit-wrapper');
		filterEditWrapper.set('innerHTML','');
	}

	btnWrapper.appendChild(btnElem);
	btnWrapper.appendChild(cancelBtnElem);
	return btnWrapper;
}

function getFilterOperatorOptions(params) {
	var fieldDef = params['field_def'];
	var operator = params['operator'];
	var filterId = params['filter_id'];
	var availOperators = getAvailOperators(fieldDef['type']);

	var availOpsElem = document.createElement('select');
	availOpsElem.setAttribute('id',filterId+'-operator');
	availOpsElem.setAttribute('name',filterId+'-operator');
	availOpsElem.setAttribute('style','vertical-align:top;');

	availOpsElem.onchange = function(){
		updateFilterOperator(this.id);
	};

	for(op in availOperators) {
		var selected = ((operator != null && typeof(operator) != 'undefined') && operator == op) ? true : false;
		var numOptions = availOpsElem.options.length;
		availOpsElem.options[numOptions] = new Option(availOperators[op],op,false,selected);
	}
	return availOpsElem;
}

function getFilterFieldOptions(params) {
	var modelName = params['model_name'];
	var fieldName = params['field_name'];
	var filterId = params['filter_id'];

	filterId = (typeof(filterId) == 'undefined' || filterId == null) ? R8.Utils.Y.guid() : filterId;
	var availFieldsElem = document.createElement('select');
	availFieldsElem.setAttribute('id',filterId+'-field');
	availFieldsElem.setAttribute('name',filterId+'-field');
	availFieldsElem.setAttribute('data-model',modelName);
	availFieldsElem.setAttribute('style','vertical-align:top;');

	availFieldsElem.onchange = function(){
		updateFilterField(this.id,this.options[this.selectedIndex].value);
	};

	var fieldDefs = getModelFieldDefs(modelName);
	for(field in fieldDefs) {
		var selected = ((fieldName != null && typeof(fieldName) != 'undefined') && fieldName == field) ? true : false;
		var numOptions = availFieldsElem.options.length;
		availFieldsElem.options[numOptions] = new Option(fieldDefs[field]['i18n'],field,false,selected);
	}
	return availFieldsElem;
}

function runSearch(searchId,save) {
	var save = (typeof(save) == 'undefined') ? false : save;

	var sNameElem = document.getElementById('search_name');
	if(save && sNameElem.value == '') {
		alert('Saved searches must have a name');
		return;
	}

	var displayColumns = document.getElementById('node-display-columns');
	var searchObj = getSearchObj(searchId);

	searchObj['search_pattern'][':columns'] = [];
	var numColumns = displayColumns.options.length;
	for(var i=0; i < numColumns; i++) {
		searchObj['search_pattern'][':columns'].push(':'+displayColumns.options[i].value);
	}

	searchObj['name'] = sNameElem.value;
	searchObj['save'] = (save == true) ? 'true' : 'false';


	YUI().use("json", function (Y) {
		var searchObjJsonStr = Y.JSON.stringify(searchObj);

		var ssObjElem = document.getElementById('saved-search-obj');
		ssObjElem.value = searchObjJsonStr;
		document.getElementById('saved-search-form').submit();
	});
}
*/
</script>
<div class="search-container">
	<div style="height: 30px; width: 800px; float: left; background-color: #FFFFFF;">
		<div style="margin: 4px 0 0 5px; float: left;">
			<a href="javascript:R8.Search.toggleSearch('{%=search_context_literal%}');">Search&nbsp;&gt;&gt;</a>
		</div>
		<div style="margin: 4px 0 0 10px; float: left;">
			{%=search_cond_literal%}
			<select name="{%=search_context_literal%}-saved-search" onchange="R8.Search.runSavedSearch('{%=search_context_literal%}',this.value);">
				{%=saved_search_list_dropdown%}
			</select>
			{%=end_literal%}
		</div>
	</div>
	<div id="{%=search_context_literal%}-search-panel" style="display: none; float:left; width: 898px;">
		<div style="float:left; width: 887px; height: 180px;">
		<div class="saved-search-l-pane">
			<div id="spacer" style="height: 40px; width: 100px;"></div>
			<div id="{%=search_context_literal%}-search-attrs" class="saved-search-categories">
				<div id="{%=search_context_literal%}-filters-search-attr" class="saved-search-cat selected"><div class="label">Filters</div></div>
				<div id="{%=search_context_literal%}-ordering-search-attr" class="saved-search-cat"><div class="label">Ordering</div></div>
				<div id="{%=search_context_literal%}-columns-search-attr" class="saved-search-cat"><div class="label">Columns</div></div>
			</div>
		</div>
		<div class="saved-search-r-pane">
			<div class="saved-search-header">
				<form id="{%=search_context_literal%}-search-form" action="{%=base_uri%}/xyz/{%=model_name_literal%}/list" method="post" enctype="multipart/form-data">
				<input type="hidden" name="search" id="{%=search_context_literal%}-saved-search-obj" value=""/>
				&nbsp;&nbsp;
				<input type="button" value="Run" style="margin-top: 2px;" onclick="R8.Search.runSearch('{%=search_context_literal%}');"/>
				Name&nbsp;<input type="text" id="{%=search_context_literal%}-search_name" name="search_name" value="" size="25" style="margin-top: 2px;"/>
				</form>
			</div>
			<div class="saved-search-attr-wrapper">
				<div id="{%=search_context_literal%}-filters-search-attr-body" class="search-attr-body" style="display:block;">
					<div class="search-filter-wrapper">
						<div class="filter-header">
							<div style="margin: 0 auto;">
								Filter List
								<div class="search-add-filter" onclick="R8.Search.renderFilterEdit('{%=search_context_literal%}');"></div>
							</div>
						</div>
						<div id="{%=search_context_literal%}-filter-list" class="filter-list">
						</div>
					</div>
					<div style="float: left; height: 100%; width: 5px; background-color: #AACCEE"></div>
					<div style="float: left; height: 100%; width: 482px; background-color: #FFFFFF;">
						<div style="width: 100%; height: 30px; border-bottom: 1px solid #AACCEE;">
							<div style="font-weight: bold; font-size: 13px">Filter Details</div>
						</div>
						<div id="{%=search_context_literal%}-filter-edit-wrapper" style="width: 100%; height: 100%;">
						</div>
					</div>
				</div>
				<div id="{%=search_context_literal%}-ordering-search-attr-body" class="search-attr-body">
					<div class="search-filter-wrapper">
						<div class="filter-header">
							<div style="margin: 0 auto;">
								Ordering List
								<div class="search-add-filter" onclick="R8.Search.renderOrderingEdit('{%=search_context_literal%}');"></div>
							</div>
						</div>
						<div id="{%=search_context_literal%}-ordering-list" class="filter-list">
						</div>
					</div>
					<div style="float: left; height: 100%; width: 5px; background-color: #AACCEE"></div>
					<div style="float: left; height: 100%; width: 482px; background-color: #FFFFFF;">
						<div style="width: 100%; height: 30px; border-bottom: 1px solid #AACCEE;">
							<div style="font-weight: bold; font-size: 13px">Order By Details</div>
						</div>
						<div id="{%=search_context_literal%}-ordering-edit-wrapper" style="width: 100%; height: 100%;">
						</div>
					</div>
				</div>
				<div id="{%=search_context_literal%}-columns-search-attr-body" class="search-attr-body">
					<div class="search-filter-wrapper">
						<div class="filter-header">
							<div style="margin: 0 auto;  padding-top: 5px;">Node Results Display Columns</div>
						</div>
						<div id="{%=search_context_literal%}-columns-list" class="column-list">
							<div style="height: 110px; width: 32px; float: left;">
								<div style="width: 16px; margin: 20px 7px 0 7px;">
									<div id="{%=search_context_literal%}-columns-mv-up" class="arrow-square blue up"></div>
									<div id="{%=search_context_literal%}-columns-mv-down" class="arrow-square blue down"></div>
								</div>
							</div>
							<div style="height: 110px; width: 268px; float: left;">
								<select id="{%=search_context_literal%}-display-columns" name="{%=search_context_literal%}-display-columns" multiple="1" style="height:110px; width: 268px;">
								</select>
							</div>
						</div>
					</div>

					<div style="float: left; height: 100%; width: 5px; background-color: #AACCEE"></div>
					<div style="float: left; height: 100%; width: 30px; background-color: #FFFFFF;">
						<div style="width: 16px; margin: 50px 7px 0 7px;">
							<div id="{%=search_context_literal%}-columns-mv-left" class="arrow-square blue left"></div>
							<div id="{%=search_context_literal%}-columns-mv-right" class="arrow-square blue right"></div>
						</div>
					</div>
					<div style="float: left; height: 100%; width: 5px; background-color: #AACCEE"></div>

					<div style="float: left; height: 100%; width: 447px; background-color: #FFFFFF;">
						<div style="width: 268px; height: 30px; border-bottom: 1px solid #AACCEE; border-right: 1px solid #AACCEE;">
							<div style="font-weight: bold; font-size: 13px; text-align: center; padding-top: 5px;">Available Node Columns</div>
						</div>
						<div id="tempId-columns-edit-wrapper" style="width: 268px; height: 100%; border-right: 1px solid #AACCEE;">
							<select id="{%=search_context_literal%}-avail-columns" name="{%=search_context_literal%}-avail-columns" multiple="1" style="height:110px; width: 268px;">
							</select>
						</div>
					</div>
				</div>
			</div>
			<!--END SAVED SEARCH ATTR WRAPPER-->
		</div>
		<!--END SAVED SEARCH RIGHT PANE-->
		</div>
		<!--END SAVED SEARCH MAIN WRAPPER-->
		<div class="search-rt-shadow">
			<div class="shadow-top-cap"></div>
			<div class="shadow-rt-body"></div>
			<div class="shadow-btm-cap"></div>
		</div>
		<div class="search-btm-shadow">
			<div class="shadow-left-cap"></div>
			<div class="shadow-btm-body"></div>
		</div>
	</div>
</div>